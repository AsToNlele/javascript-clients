// tslint:disable
/**
 * Cost Management
 * The API for Project Koku and OpenShift cost management. You can find out more about Project Koku at [https://github.com/project-koku/](https://github.com/project-koku/).
 *
 * The version of the OpenAPI document: 1.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface CostModel
 */
export interface CostModel {
    /**
     *
     * @type {string}
     * @memberof CostModel
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof CostModel
     */
    description: string;
    /**
     *
     * @type {string}
     * @memberof CostModel
     */
    source_type: string;
    /**
     *
     * @type {Array<string>}
     * @memberof CostModel
     */
    source_uuids?: Array<string>;
    /**
     *
     * @type {Array<Rate>}
     * @memberof CostModel
     */
    rates?: Array<Rate>;
    /**
     *
     * @type {Markup}
     * @memberof CostModel
     */
    markup?: Markup;
}
/**
 *
 * @export
 * @interface CostModelOut
 */
export interface CostModelOut extends CostModelResp {
    /**
     *
     * @type {string}
     * @memberof CostModelOut
     */
    uuid?: string;
    /**
     *
     * @type {string}
     * @memberof CostModelOut
     */
    created_timestamp?: string;
    /**
     *
     * @type {string}
     * @memberof CostModelOut
     */
    updated_timestamp?: string;
    /**
     *
     * @type {Markup}
     * @memberof CostModelOut
     */
    markup?: Markup;
}
/**
 *
 * @export
 * @interface CostModelOutAllOf
 */
export interface CostModelOutAllOf {
    /**
     *
     * @type {string}
     * @memberof CostModelOutAllOf
     */
    uuid?: string;
    /**
     *
     * @type {string}
     * @memberof CostModelOutAllOf
     */
    created_timestamp?: string;
    /**
     *
     * @type {string}
     * @memberof CostModelOutAllOf
     */
    updated_timestamp?: string;
    /**
     *
     * @type {Markup}
     * @memberof CostModelOutAllOf
     */
    markup?: Markup;
}
/**
 *
 * @export
 * @interface CostModelPagination
 */
export interface CostModelPagination extends ListPagination {
    /**
     *
     * @type {Array<CostModelOut>}
     * @memberof CostModelPagination
     */
    data: Array<CostModelOut>;
}
/**
 *
 * @export
 * @interface CostModelPaginationAllOf
 */
export interface CostModelPaginationAllOf {
    /**
     *
     * @type {Array<CostModelOut>}
     * @memberof CostModelPaginationAllOf
     */
    data: Array<CostModelOut>;
}
/**
 *
 * @export
 * @interface CostModelResp
 */
export interface CostModelResp {
    /**
     *
     * @type {string}
     * @memberof CostModelResp
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof CostModelResp
     */
    description: string;
    /**
     *
     * @type {string}
     * @memberof CostModelResp
     */
    source_type: string;
    /**
     *
     * @type {Array<CostModelRespSources>}
     * @memberof CostModelResp
     */
    sources?: Array<CostModelRespSources>;
    /**
     *
     * @type {Array<Rate>}
     * @memberof CostModelResp
     */
    rates?: Array<Rate>;
}
/**
 *
 * @export
 * @interface CostModelRespSources
 */
export interface CostModelRespSources {
    /**
     *
     * @type {string}
     * @memberof CostModelRespSources
     */
    uuid?: string;
    /**
     *
     * @type {string}
     * @memberof CostModelRespSources
     */
    name?: string;
}
/**
 *
 * @export
 * @interface Customer
 */
export interface Customer {
    /**
     *
     * @type {string}
     * @memberof Customer
     */
    account_id: string;
}
/**
 *
 * @export
 * @interface CustomerOut
 */
export interface CustomerOut extends Customer {
    /**
     *
     * @type {string}
     * @memberof CustomerOut
     */
    uuid: string;
    /**
     *
     * @type {string}
     * @memberof CustomerOut
     */
    date_created: string;
}
/**
 *
 * @export
 * @interface CustomerOutAllOf
 */
export interface CustomerOutAllOf {
    /**
     *
     * @type {string}
     * @memberof CustomerOutAllOf
     */
    uuid: string;
    /**
     *
     * @type {string}
     * @memberof CustomerOutAllOf
     */
    date_created: string;
}
/**
 *
 * @export
 * @interface DependencyError
 */
export interface DependencyError {
    /**
     *
     * @type {Array<object>}
     * @memberof DependencyError
     */
    errors: Array<object>;
}
/**
 *
 * @export
 * @interface ListPagination
 */
export interface ListPagination {
    /**
     *
     * @type {PaginationMeta}
     * @memberof ListPagination
     */
    meta?: PaginationMeta;
    /**
     *
     * @type {PaginationLinks}
     * @memberof ListPagination
     */
    links?: PaginationLinks;
}
/**
 *
 * @export
 * @interface Markup
 */
export interface Markup {
    /**
     *
     * @type {number}
     * @memberof Markup
     */
    value?: number;
    /**
     *
     * @type {string}
     * @memberof Markup
     */
    unit?: MarkupUnitEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum MarkupUnitEnum {
    Percent = 'percent'
}

/**
 *
 * @export
 * @interface Metrics
 */
export interface Metrics extends ListPagination {
    /**
     *
     * @type {Array<MetricsOut>}
     * @memberof Metrics
     */
    data: Array<MetricsOut>;
}
/**
 *
 * @export
 * @interface MetricsAllOf
 */
export interface MetricsAllOf {
    /**
     *
     * @type {Array<MetricsOut>}
     * @memberof MetricsAllOf
     */
    data: Array<MetricsOut>;
}
/**
 *
 * @export
 * @interface MetricsOut
 */
export interface MetricsOut {
    /**
     *
     * @type {string}
     * @memberof MetricsOut
     */
    source_type: string;
    /**
     *
     * @type {string}
     * @memberof MetricsOut
     */
    metric: string;
    /**
     *
     * @type {string}
     * @memberof MetricsOut
     */
    label_metric: string;
    /**
     *
     * @type {string}
     * @memberof MetricsOut
     */
    label_measurement: string;
    /**
     *
     * @type {string}
     * @memberof MetricsOut
     */
    label_measurement_unit: string;
    /**
     *
     * @type {string}
     * @memberof MetricsOut
     */
    default_cost_type: string;
}
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     *
     * @type {Array<object>}
     * @memberof ModelError
     */
    errors: Array<object>;
}
/**
 *
 * @export
 * @interface PaginationLinks
 */
export interface PaginationLinks {
    /**
     *
     * @type {string}
     * @memberof PaginationLinks
     */
    first?: string;
    /**
     *
     * @type {string}
     * @memberof PaginationLinks
     */
    previous?: string;
    /**
     *
     * @type {string}
     * @memberof PaginationLinks
     */
    next?: string;
    /**
     *
     * @type {string}
     * @memberof PaginationLinks
     */
    last?: string;
}
/**
 *
 * @export
 * @interface PaginationMeta
 */
export interface PaginationMeta {
    /**
     *
     * @type {number}
     * @memberof PaginationMeta
     */
    count?: number;
}
/**
 *
 * @export
 * @interface Rate
 */
export interface Rate {
    /**
     *
     * @type {string}
     * @memberof Rate
     */
    uuid?: string;
    /**
     *
     * @type {object}
     * @memberof Rate
     */
    metric: object;
    /**
     *
     * @type {string}
     * @memberof Rate
     */
    cost_type?: RateCostTypeEnum;
    /**
     *
     * @type {Array<object>}
     * @memberof Rate
     */
    tiered_rates?: Array<object>;
}

/**
    * @export
    * @enum {string}
    */
export enum RateCostTypeEnum {
    Infrastructure = 'Infrastructure',
    Supplementary = 'Supplementary'
}

/**
 *
 * @export
 * @interface Report
 */
export interface Report {
    /**
     *
     * @type {ReportPaginationMeta}
     * @memberof Report
     */
    meta?: ReportPaginationMeta;
    /**
     *
     * @type {PaginationLinks}
     * @memberof Report
     */
    links?: PaginationLinks;
}
/**
 *
 * @export
 * @interface ReportAzureFilter
 */
export interface ReportAzureFilter {
    /**
     * Limits the data points returns and aggregates remaining data.
     * @type {number}
     * @memberof ReportAzureFilter
     */
    limit?: number;
    /**
     * Offsets the data points returned when using limit.
     * @type {number}
     * @memberof ReportAzureFilter
     */
    offset?: number;
    /**
     *
     * @type {ReportResolution}
     * @memberof ReportAzureFilter
     */
    resolution?: ReportResolution;
    /**
     *
     * @type {ReportTimeScopeValue}
     * @memberof ReportAzureFilter
     */
    time_scope_value?: ReportTimeScopeValue;
    /**
     *
     * @type {ReportTimeScopeUnits}
     * @memberof ReportAzureFilter
     */
    time_scope_units?: ReportTimeScopeUnits;
    /**
     *
     * @type {Array<ReportResourceScope>}
     * @memberof ReportAzureFilter
     */
    resource_scope?: Array<ReportResourceScope>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportAzureFilter
     */
    subscription_guid?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportAzureFilter
     */
    service_name?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportAzureFilter
     */
    resource_location?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportAzureFilter
     */
    instance_type?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportAzureFilter
     */
    tag?: Array<string>;
}
/**
 * The grouping to apply to the report. No grouping by default. When grouping by account the account_alias will be provided if avaiable.
 * @export
 * @interface ReportAzureGrouping
 */
export interface ReportAzureGrouping {
    /**
     *
     * @type {Array<string>}
     * @memberof ReportAzureGrouping
     */
    subscription_guid?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportAzureGrouping
     */
    service_name?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportAzureGrouping
     */
    resource_location?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportAzureGrouping
     */
    instance_type?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportAzureGrouping
     */
    tag?: Array<string>;
}
/**
 * The ordering to apply to the report. Default is ascending order for the data.
 * @export
 * @interface ReportAzureOrdering
 */
export interface ReportAzureOrdering {
    /**
     *
     * @type {string}
     * @memberof ReportAzureOrdering
     */
    infrastructure?: ReportAzureOrderingInfrastructureEnum;
    /**
     *
     * @type {string}
     * @memberof ReportAzureOrdering
     */
    supplementary?: ReportAzureOrderingSupplementaryEnum;
    /**
     *
     * @type {string}
     * @memberof ReportAzureOrdering
     */
    cost?: ReportAzureOrderingCostEnum;
    /**
     *
     * @type {string}
     * @memberof ReportAzureOrdering
     */
    usage?: ReportAzureOrderingUsageEnum;
    /**
     *
     * @type {string}
     * @memberof ReportAzureOrdering
     */
    delta?: ReportAzureOrderingDeltaEnum;
    /**
     *
     * @type {string}
     * @memberof ReportAzureOrdering
     */
    subscription_guid?: ReportAzureOrderingSubscriptionGuidEnum;
    /**
     *
     * @type {string}
     * @memberof ReportAzureOrdering
     */
    resource_location?: ReportAzureOrderingResourceLocationEnum;
    /**
     *
     * @type {string}
     * @memberof ReportAzureOrdering
     */
    service_name?: ReportAzureOrderingServiceNameEnum;
    /**
     *
     * @type {string}
     * @memberof ReportAzureOrdering
     */
    instance_type?: ReportAzureOrderingInstanceTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ReportAzureOrderingInfrastructureEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportAzureOrderingSupplementaryEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportAzureOrderingCostEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportAzureOrderingUsageEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportAzureOrderingDeltaEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportAzureOrderingSubscriptionGuidEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportAzureOrderingResourceLocationEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportAzureOrderingServiceNameEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportAzureOrderingInstanceTypeEnum {
    Asc = 'asc',
    Desc = 'desc'
}

/**
 *
 * @export
 * @interface ReportCost
 */
export interface ReportCost extends Report {
    /**
     *
     * @type {Array<object>}
     * @memberof ReportCost
     */
    data: Array<object>;
}
/**
 *
 * @export
 * @interface ReportCostAllOf
 */
export interface ReportCostAllOf {
    /**
     *
     * @type {Array<object>}
     * @memberof ReportCostAllOf
     */
    data: Array<object>;
}
/**
 *
 * @export
 * @interface ReportCosts
 */
export interface ReportCosts extends Report {
    /**
     *
     * @type {Array<object>}
     * @memberof ReportCosts
     */
    data: Array<object>;
}
/**
 *
 * @export
 * @interface ReportCostsAllOf
 */
export interface ReportCostsAllOf {
    /**
     *
     * @type {Array<object>}
     * @memberof ReportCostsAllOf
     */
    data: Array<object>;
}
/**
 * The ordering to apply to the report. Default is ascending order for the data.
 * @export
 * @interface ReportCostsOpenShiftOrdering
 */
export interface ReportCostsOpenShiftOrdering {
    /**
     *
     * @type {string}
     * @memberof ReportCostsOpenShiftOrdering
     */
    cluster?: ReportCostsOpenShiftOrderingClusterEnum;
    /**
     *
     * @type {string}
     * @memberof ReportCostsOpenShiftOrdering
     */
    project?: ReportCostsOpenShiftOrderingProjectEnum;
    /**
     *
     * @type {string}
     * @memberof ReportCostsOpenShiftOrdering
     */
    node?: ReportCostsOpenShiftOrderingNodeEnum;
    /**
     *
     * @type {string}
     * @memberof ReportCostsOpenShiftOrdering
     */
    infrastructure?: ReportCostsOpenShiftOrderingInfrastructureEnum;
    /**
     *
     * @type {string}
     * @memberof ReportCostsOpenShiftOrdering
     */
    supplementary?: ReportCostsOpenShiftOrderingSupplementaryEnum;
    /**
     *
     * @type {string}
     * @memberof ReportCostsOpenShiftOrdering
     */
    cost?: ReportCostsOpenShiftOrderingCostEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ReportCostsOpenShiftOrderingClusterEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportCostsOpenShiftOrderingProjectEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportCostsOpenShiftOrderingNodeEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportCostsOpenShiftOrderingInfrastructureEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportCostsOpenShiftOrderingSupplementaryEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportCostsOpenShiftOrderingCostEnum {
    Asc = 'asc',
    Desc = 'desc'
}

/**
 * Field to calculate delta values for in report.
 * @export
 * @interface ReportDelta
 */
export interface ReportDelta {
    /**
     *
     * @type {string}
     * @memberof ReportDelta
     */
    delta?: string;
}
/**
 *
 * @export
 * @interface ReportFilter
 */
export interface ReportFilter {
    /**
     * Limits the data points returns and aggregates remaining data.
     * @type {number}
     * @memberof ReportFilter
     */
    limit?: number;
    /**
     * Offsets the data points returned when using limit.
     * @type {number}
     * @memberof ReportFilter
     */
    offset?: number;
    /**
     *
     * @type {ReportResolution}
     * @memberof ReportFilter
     */
    resolution?: ReportResolution;
    /**
     *
     * @type {ReportTimeScopeValue}
     * @memberof ReportFilter
     */
    time_scope_value?: ReportTimeScopeValue;
    /**
     *
     * @type {ReportTimeScopeUnits}
     * @memberof ReportFilter
     */
    time_scope_units?: ReportTimeScopeUnits;
    /**
     *
     * @type {Array<ReportResourceScope>}
     * @memberof ReportFilter
     */
    resource_scope?: Array<ReportResourceScope>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportFilter
     */
    account?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportFilter
     */
    service?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportFilter
     */
    region?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportFilter
     */
    az?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportFilter
     */
    tag?: Array<string>;
}
/**
 * The grouping to apply to the report. No grouping by default. When grouping by account the account_alias will be provided if avaiable.
 * @export
 * @interface ReportGrouping
 */
export interface ReportGrouping {
    /**
     *
     * @type {Array<string>}
     * @memberof ReportGrouping
     */
    account?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportGrouping
     */
    service?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportGrouping
     */
    region?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportGrouping
     */
    az?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportGrouping
     */
    instance_type?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportGrouping
     */
    storage_type?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportGrouping
     */
    tag?: Array<string>;
}
/**
 *
 * @export
 * @interface ReportInstanceInventory
 */
export interface ReportInstanceInventory extends Report {
    /**
     *
     * @type {Array<object>}
     * @memberof ReportInstanceInventory
     */
    data: Array<object>;
}
/**
 * The ordering to apply to the report. Default is ascending order for the data.
 * @export
 * @interface ReportInventoryOpenShiftOrdering
 */
export interface ReportInventoryOpenShiftOrdering {
    /**
     *
     * @type {string}
     * @memberof ReportInventoryOpenShiftOrdering
     */
    cluster?: ReportInventoryOpenShiftOrderingClusterEnum;
    /**
     *
     * @type {string}
     * @memberof ReportInventoryOpenShiftOrdering
     */
    project?: ReportInventoryOpenShiftOrderingProjectEnum;
    /**
     *
     * @type {string}
     * @memberof ReportInventoryOpenShiftOrdering
     */
    node?: ReportInventoryOpenShiftOrderingNodeEnum;
    /**
     *
     * @type {string}
     * @memberof ReportInventoryOpenShiftOrdering
     */
    usage?: ReportInventoryOpenShiftOrderingUsageEnum;
    /**
     *
     * @type {string}
     * @memberof ReportInventoryOpenShiftOrdering
     */
    request?: ReportInventoryOpenShiftOrderingRequestEnum;
    /**
     *
     * @type {string}
     * @memberof ReportInventoryOpenShiftOrdering
     */
    infrastructure?: ReportInventoryOpenShiftOrderingInfrastructureEnum;
    /**
     *
     * @type {string}
     * @memberof ReportInventoryOpenShiftOrdering
     */
    supplementary?: ReportInventoryOpenShiftOrderingSupplementaryEnum;
    /**
     *
     * @type {string}
     * @memberof ReportInventoryOpenShiftOrdering
     */
    cost?: ReportInventoryOpenShiftOrderingCostEnum;
    /**
     *
     * @type {string}
     * @memberof ReportInventoryOpenShiftOrdering
     */
    limit?: ReportInventoryOpenShiftOrderingLimitEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ReportInventoryOpenShiftOrderingClusterEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportInventoryOpenShiftOrderingProjectEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportInventoryOpenShiftOrderingNodeEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportInventoryOpenShiftOrderingUsageEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportInventoryOpenShiftOrderingRequestEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportInventoryOpenShiftOrderingInfrastructureEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportInventoryOpenShiftOrderingSupplementaryEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportInventoryOpenShiftOrderingCostEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportInventoryOpenShiftOrderingLimitEnum {
    Asc = 'asc',
    Desc = 'desc'
}

/**
 *
 * @export
 * @interface ReportOpenShiftAWSFilter
 */
export interface ReportOpenShiftAWSFilter {
    /**
     * Limits the data points returns and aggregates remaining data.
     * @type {number}
     * @memberof ReportOpenShiftAWSFilter
     */
    limit?: number;
    /**
     * Offsets the data points returned when using limit.
     * @type {number}
     * @memberof ReportOpenShiftAWSFilter
     */
    offset?: number;
    /**
     *
     * @type {ReportResolution}
     * @memberof ReportOpenShiftAWSFilter
     */
    resolution?: ReportResolution;
    /**
     *
     * @type {ReportTimeScopeValue}
     * @memberof ReportOpenShiftAWSFilter
     */
    time_scope_value?: ReportTimeScopeValue;
    /**
     *
     * @type {ReportTimeScopeUnits}
     * @memberof ReportOpenShiftAWSFilter
     */
    time_scope_units?: ReportTimeScopeUnits;
    /**
     *
     * @type {Array<ReportResourceScope>}
     * @memberof ReportOpenShiftAWSFilter
     */
    resource_scope?: Array<ReportResourceScope>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAWSFilter
     */
    account?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAWSFilter
     */
    service?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAWSFilter
     */
    region?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAWSFilter
     */
    az?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAWSFilter
     */
    tag?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAWSFilter
     */
    project?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAWSFilter
     */
    cluster?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAWSFilter
     */
    node?: Array<string>;
}
/**
 * The grouping to apply to the report. No grouping by default. When grouping by account the account_alias will be provided if avaiable.
 * @export
 * @interface ReportOpenShiftAWSGrouping
 */
export interface ReportOpenShiftAWSGrouping {
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAWSGrouping
     */
    account?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAWSGrouping
     */
    service?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAWSGrouping
     */
    region?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAWSGrouping
     */
    az?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAWSGrouping
     */
    instance_type?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAWSGrouping
     */
    storage_type?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAWSGrouping
     */
    tag?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAWSGrouping
     */
    cluster?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAWSGrouping
     */
    project?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAWSGrouping
     */
    node?: Array<string>;
}
/**
 *
 * @export
 * @interface ReportOpenShiftAWSInstanceInventory
 */
export interface ReportOpenShiftAWSInstanceInventory extends Report {
    /**
     *
     * @type {ReportOpenShiftAWSGrouping}
     * @memberof ReportOpenShiftAWSInstanceInventory
     */
    group_by?: ReportOpenShiftAWSGrouping;
    /**
     *
     * @type {ReportOpenShiftAWSOrdering}
     * @memberof ReportOpenShiftAWSInstanceInventory
     */
    order_by?: ReportOpenShiftAWSOrdering;
    /**
     *
     * @type {ReportOpenShiftAWSFilter}
     * @memberof ReportOpenShiftAWSInstanceInventory
     */
    filter?: ReportOpenShiftAWSFilter;
    /**
     *
     * @type {Array<object>}
     * @memberof ReportOpenShiftAWSInstanceInventory
     */
    data: Array<object>;
}
/**
 *
 * @export
 * @interface ReportOpenShiftAWSInstanceInventoryAllOf
 */
export interface ReportOpenShiftAWSInstanceInventoryAllOf {
    /**
     *
     * @type {ReportOpenShiftAWSGrouping}
     * @memberof ReportOpenShiftAWSInstanceInventoryAllOf
     */
    group_by?: ReportOpenShiftAWSGrouping;
    /**
     *
     * @type {ReportOpenShiftAWSOrdering}
     * @memberof ReportOpenShiftAWSInstanceInventoryAllOf
     */
    order_by?: ReportOpenShiftAWSOrdering;
    /**
     *
     * @type {ReportOpenShiftAWSFilter}
     * @memberof ReportOpenShiftAWSInstanceInventoryAllOf
     */
    filter?: ReportOpenShiftAWSFilter;
    /**
     *
     * @type {Array<object>}
     * @memberof ReportOpenShiftAWSInstanceInventoryAllOf
     */
    data: Array<object>;
}
/**
 * The ordering to apply to the report. Default is ascending order for the data.
 * @export
 * @interface ReportOpenShiftAWSOrdering
 */
export interface ReportOpenShiftAWSOrdering {
    /**
     *
     * @type {string}
     * @memberof ReportOpenShiftAWSOrdering
     */
    infrastructure?: ReportOpenShiftAWSOrderingInfrastructureEnum;
    /**
     *
     * @type {string}
     * @memberof ReportOpenShiftAWSOrdering
     */
    supplementary?: ReportOpenShiftAWSOrderingSupplementaryEnum;
    /**
     *
     * @type {string}
     * @memberof ReportOpenShiftAWSOrdering
     */
    cost?: ReportOpenShiftAWSOrderingCostEnum;
    /**
     *
     * @type {string}
     * @memberof ReportOpenShiftAWSOrdering
     */
    usage?: ReportOpenShiftAWSOrderingUsageEnum;
    /**
     *
     * @type {string}
     * @memberof ReportOpenShiftAWSOrdering
     */
    delta?: ReportOpenShiftAWSOrderingDeltaEnum;
    /**
     *
     * @type {string}
     * @memberof ReportOpenShiftAWSOrdering
     */
    account_alias?: ReportOpenShiftAWSOrderingAccountAliasEnum;
    /**
     *
     * @type {string}
     * @memberof ReportOpenShiftAWSOrdering
     */
    region?: ReportOpenShiftAWSOrderingRegionEnum;
    /**
     *
     * @type {string}
     * @memberof ReportOpenShiftAWSOrdering
     */
    service?: ReportOpenShiftAWSOrderingServiceEnum;
    /**
     *
     * @type {string}
     * @memberof ReportOpenShiftAWSOrdering
     */
    cluster?: ReportOpenShiftAWSOrderingClusterEnum;
    /**
     *
     * @type {string}
     * @memberof ReportOpenShiftAWSOrdering
     */
    project?: ReportOpenShiftAWSOrderingProjectEnum;
    /**
     *
     * @type {string}
     * @memberof ReportOpenShiftAWSOrdering
     */
    node?: ReportOpenShiftAWSOrderingNodeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ReportOpenShiftAWSOrderingInfrastructureEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportOpenShiftAWSOrderingSupplementaryEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportOpenShiftAWSOrderingCostEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportOpenShiftAWSOrderingUsageEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportOpenShiftAWSOrderingDeltaEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportOpenShiftAWSOrderingAccountAliasEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportOpenShiftAWSOrderingRegionEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportOpenShiftAWSOrderingServiceEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportOpenShiftAWSOrderingClusterEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportOpenShiftAWSOrderingProjectEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportOpenShiftAWSOrderingNodeEnum {
    Asc = 'asc',
    Desc = 'desc'
}

/**
 *
 * @export
 * @interface ReportOpenShiftAWSStorageInventory
 */
export interface ReportOpenShiftAWSStorageInventory extends Report {
    /**
     *
     * @type {ReportOpenShiftAWSGrouping}
     * @memberof ReportOpenShiftAWSStorageInventory
     */
    group_by?: ReportOpenShiftAWSGrouping;
    /**
     *
     * @type {ReportOpenShiftAWSOrdering}
     * @memberof ReportOpenShiftAWSStorageInventory
     */
    order_by?: ReportOpenShiftAWSOrdering;
    /**
     *
     * @type {ReportOpenShiftAWSFilter}
     * @memberof ReportOpenShiftAWSStorageInventory
     */
    filter?: ReportOpenShiftAWSFilter;
    /**
     *
     * @type {Array<object>}
     * @memberof ReportOpenShiftAWSStorageInventory
     */
    data: Array<object>;
}
/**
 *
 * @export
 * @interface ReportOpenShiftAWSStorageInventoryAllOf
 */
export interface ReportOpenShiftAWSStorageInventoryAllOf {
    /**
     *
     * @type {ReportOpenShiftAWSGrouping}
     * @memberof ReportOpenShiftAWSStorageInventoryAllOf
     */
    group_by?: ReportOpenShiftAWSGrouping;
    /**
     *
     * @type {ReportOpenShiftAWSOrdering}
     * @memberof ReportOpenShiftAWSStorageInventoryAllOf
     */
    order_by?: ReportOpenShiftAWSOrdering;
    /**
     *
     * @type {ReportOpenShiftAWSFilter}
     * @memberof ReportOpenShiftAWSStorageInventoryAllOf
     */
    filter?: ReportOpenShiftAWSFilter;
    /**
     *
     * @type {Array<object>}
     * @memberof ReportOpenShiftAWSStorageInventoryAllOf
     */
    data: Array<object>;
}
/**
 *
 * @export
 * @interface ReportOpenShiftAllInstanceInventory
 */
export interface ReportOpenShiftAllInstanceInventory extends ReportOpenShiftAWSInstanceInventory {
}
/**
 *
 * @export
 * @interface ReportOpenShiftAllStorageInventory
 */
export interface ReportOpenShiftAllStorageInventory extends ReportOpenShiftAWSStorageInventory {
}
/**
 *
 * @export
 * @interface ReportOpenShiftAzureFilter
 */
export interface ReportOpenShiftAzureFilter {
    /**
     * Limits the data points returns and aggregates remaining data.
     * @type {number}
     * @memberof ReportOpenShiftAzureFilter
     */
    limit?: number;
    /**
     * Offsets the data points returned when using limit.
     * @type {number}
     * @memberof ReportOpenShiftAzureFilter
     */
    offset?: number;
    /**
     *
     * @type {ReportResolution}
     * @memberof ReportOpenShiftAzureFilter
     */
    resolution?: ReportResolution;
    /**
     *
     * @type {ReportTimeScopeValue}
     * @memberof ReportOpenShiftAzureFilter
     */
    time_scope_value?: ReportTimeScopeValue;
    /**
     *
     * @type {ReportTimeScopeUnits}
     * @memberof ReportOpenShiftAzureFilter
     */
    time_scope_units?: ReportTimeScopeUnits;
    /**
     *
     * @type {Array<ReportResourceScope>}
     * @memberof ReportOpenShiftAzureFilter
     */
    resource_scope?: Array<ReportResourceScope>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAzureFilter
     */
    subscription_guid?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAzureFilter
     */
    service_name?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAzureFilter
     */
    resource_location?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAzureFilter
     */
    instance_type?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAzureFilter
     */
    tag?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAzureFilter
     */
    project?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAzureFilter
     */
    cluster?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAzureFilter
     */
    node?: Array<string>;
}
/**
 * The grouping to apply to the report. No grouping by default. When grouping by account the account_alias will be provided if avaiable.
 * @export
 * @interface ReportOpenShiftAzureGrouping
 */
export interface ReportOpenShiftAzureGrouping {
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAzureGrouping
     */
    subscription_guid?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAzureGrouping
     */
    service_name?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAzureGrouping
     */
    resource_location?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAzureGrouping
     */
    instance_type?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAzureGrouping
     */
    tag?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAzureGrouping
     */
    cluster?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAzureGrouping
     */
    project?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftAzureGrouping
     */
    node?: Array<string>;
}
/**
 *
 * @export
 * @interface ReportOpenShiftAzureInstanceInventory
 */
export interface ReportOpenShiftAzureInstanceInventory {
    /**
     *
     * @type {ReportPaginationMeta}
     * @memberof ReportOpenShiftAzureInstanceInventory
     */
    meta?: ReportPaginationMeta;
    /**
     *
     * @type {PaginationLinks}
     * @memberof ReportOpenShiftAzureInstanceInventory
     */
    links?: PaginationLinks;
    /**
     *
     * @type {ReportOpenShiftAzureGrouping}
     * @memberof ReportOpenShiftAzureInstanceInventory
     */
    group_by?: ReportOpenShiftAzureGrouping;
    /**
     *
     * @type {ReportOpenShiftAzureOrdering}
     * @memberof ReportOpenShiftAzureInstanceInventory
     */
    order_by?: ReportOpenShiftAzureOrdering;
    /**
     *
     * @type {ReportOpenShiftAzureFilter}
     * @memberof ReportOpenShiftAzureInstanceInventory
     */
    filter?: ReportOpenShiftAzureFilter;
    /**
     *
     * @type {Array<object>}
     * @memberof ReportOpenShiftAzureInstanceInventory
     */
    data: Array<object>;
}
/**
 * The ordering to apply to the report. Default is ascending order for the data.
 * @export
 * @interface ReportOpenShiftAzureOrdering
 */
export interface ReportOpenShiftAzureOrdering {
    /**
     *
     * @type {string}
     * @memberof ReportOpenShiftAzureOrdering
     */
    infrastructure?: ReportOpenShiftAzureOrderingInfrastructureEnum;
    /**
     *
     * @type {string}
     * @memberof ReportOpenShiftAzureOrdering
     */
    supplementary?: ReportOpenShiftAzureOrderingSupplementaryEnum;
    /**
     *
     * @type {string}
     * @memberof ReportOpenShiftAzureOrdering
     */
    cost?: ReportOpenShiftAzureOrderingCostEnum;
    /**
     *
     * @type {string}
     * @memberof ReportOpenShiftAzureOrdering
     */
    usage?: ReportOpenShiftAzureOrderingUsageEnum;
    /**
     *
     * @type {string}
     * @memberof ReportOpenShiftAzureOrdering
     */
    delta?: ReportOpenShiftAzureOrderingDeltaEnum;
    /**
     *
     * @type {string}
     * @memberof ReportOpenShiftAzureOrdering
     */
    subscription_guid?: ReportOpenShiftAzureOrderingSubscriptionGuidEnum;
    /**
     *
     * @type {string}
     * @memberof ReportOpenShiftAzureOrdering
     */
    resource_location?: ReportOpenShiftAzureOrderingResourceLocationEnum;
    /**
     *
     * @type {string}
     * @memberof ReportOpenShiftAzureOrdering
     */
    service_name?: ReportOpenShiftAzureOrderingServiceNameEnum;
    /**
     *
     * @type {string}
     * @memberof ReportOpenShiftAzureOrdering
     */
    instance_type?: ReportOpenShiftAzureOrderingInstanceTypeEnum;
    /**
     *
     * @type {string}
     * @memberof ReportOpenShiftAzureOrdering
     */
    cluster?: ReportOpenShiftAzureOrderingClusterEnum;
    /**
     *
     * @type {string}
     * @memberof ReportOpenShiftAzureOrdering
     */
    project?: ReportOpenShiftAzureOrderingProjectEnum;
    /**
     *
     * @type {string}
     * @memberof ReportOpenShiftAzureOrdering
     */
    node?: ReportOpenShiftAzureOrderingNodeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ReportOpenShiftAzureOrderingInfrastructureEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportOpenShiftAzureOrderingSupplementaryEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportOpenShiftAzureOrderingCostEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportOpenShiftAzureOrderingUsageEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportOpenShiftAzureOrderingDeltaEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportOpenShiftAzureOrderingSubscriptionGuidEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportOpenShiftAzureOrderingResourceLocationEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportOpenShiftAzureOrderingServiceNameEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportOpenShiftAzureOrderingInstanceTypeEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportOpenShiftAzureOrderingClusterEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportOpenShiftAzureOrderingProjectEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportOpenShiftAzureOrderingNodeEnum {
    Asc = 'asc',
    Desc = 'desc'
}

/**
 *
 * @export
 * @interface ReportOpenShiftAzureStorageInventory
 */
export interface ReportOpenShiftAzureStorageInventory extends Report {
    /**
     *
     * @type {ReportOpenShiftAzureGrouping}
     * @memberof ReportOpenShiftAzureStorageInventory
     */
    group_by?: ReportOpenShiftAzureGrouping;
    /**
     *
     * @type {ReportOpenShiftAzureOrdering}
     * @memberof ReportOpenShiftAzureStorageInventory
     */
    order_by?: ReportOpenShiftAzureOrdering;
    /**
     *
     * @type {ReportOpenShiftAzureFilter}
     * @memberof ReportOpenShiftAzureStorageInventory
     */
    filter?: ReportOpenShiftAzureFilter;
    /**
     *
     * @type {Array<object>}
     * @memberof ReportOpenShiftAzureStorageInventory
     */
    data: Array<object>;
}
/**
 *
 * @export
 * @interface ReportOpenShiftAzureStorageInventoryAllOf
 */
export interface ReportOpenShiftAzureStorageInventoryAllOf {
    /**
     *
     * @type {ReportOpenShiftAzureGrouping}
     * @memberof ReportOpenShiftAzureStorageInventoryAllOf
     */
    group_by?: ReportOpenShiftAzureGrouping;
    /**
     *
     * @type {ReportOpenShiftAzureOrdering}
     * @memberof ReportOpenShiftAzureStorageInventoryAllOf
     */
    order_by?: ReportOpenShiftAzureOrdering;
    /**
     *
     * @type {ReportOpenShiftAzureFilter}
     * @memberof ReportOpenShiftAzureStorageInventoryAllOf
     */
    filter?: ReportOpenShiftAzureFilter;
    /**
     *
     * @type {Array<object>}
     * @memberof ReportOpenShiftAzureStorageInventoryAllOf
     */
    data: Array<object>;
}
/**
 *
 * @export
 * @interface ReportOpenShiftCpu
 */
export interface ReportOpenShiftCpu extends Report {
    /**
     *
     * @type {Array<object>}
     * @memberof ReportOpenShiftCpu
     */
    data: Array<object>;
}
/**
 *
 * @export
 * @interface ReportOpenShiftCpuAllOf
 */
export interface ReportOpenShiftCpuAllOf {
    /**
     *
     * @type {Array<object>}
     * @memberof ReportOpenShiftCpuAllOf
     */
    data: Array<object>;
}
/**
 *
 * @export
 * @interface ReportOpenShiftFilter
 */
export interface ReportOpenShiftFilter {
    /**
     * Limits the data points returns and aggregates remaining data.
     * @type {number}
     * @memberof ReportOpenShiftFilter
     */
    limit?: number;
    /**
     * Offsets the data points returned when using limit.
     * @type {number}
     * @memberof ReportOpenShiftFilter
     */
    offset?: number;
    /**
     *
     * @type {ReportResolution}
     * @memberof ReportOpenShiftFilter
     */
    resolution?: ReportResolution;
    /**
     *
     * @type {ReportTimeScopeValue}
     * @memberof ReportOpenShiftFilter
     */
    time_scope_value?: ReportTimeScopeValue;
    /**
     *
     * @type {ReportTimeScopeUnits}
     * @memberof ReportOpenShiftFilter
     */
    time_scope_units?: ReportTimeScopeUnits;
    /**
     *
     * @type {Array<ReportResourceScope>}
     * @memberof ReportOpenShiftFilter
     */
    resource_scope?: Array<ReportResourceScope>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftFilter
     */
    project?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftFilter
     */
    cluster?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftFilter
     */
    pod?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftFilter
     */
    node?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftFilter
     */
    tag?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftFilter
     */
    infrastructures?: Array<string>;
}
/**
 * The grouping to apply to the report. No grouping by default.
 * @export
 * @interface ReportOpenShiftGrouping
 */
export interface ReportOpenShiftGrouping {
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftGrouping
     */
    cluster?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftGrouping
     */
    project?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftGrouping
     */
    node?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportOpenShiftGrouping
     */
    tag?: Array<string>;
}
/**
 *
 * @export
 * @interface ReportOpenShiftMemory
 */
export interface ReportOpenShiftMemory extends Report {
    /**
     *
     * @type {Array<object>}
     * @memberof ReportOpenShiftMemory
     */
    data: Array<object>;
}
/**
 *
 * @export
 * @interface ReportOpenShiftMemoryAllOf
 */
export interface ReportOpenShiftMemoryAllOf {
    /**
     *
     * @type {Array<object>}
     * @memberof ReportOpenShiftMemoryAllOf
     */
    data: Array<object>;
}
/**
 *
 * @export
 * @interface ReportOpenShiftVolume
 */
export interface ReportOpenShiftVolume extends Report {
    /**
     *
     * @type {Array<object>}
     * @memberof ReportOpenShiftVolume
     */
    data: Array<object>;
}
/**
 *
 * @export
 * @interface ReportOpenShiftVolumeAllOf
 */
export interface ReportOpenShiftVolumeAllOf {
    /**
     *
     * @type {Array<object>}
     * @memberof ReportOpenShiftVolumeAllOf
     */
    data: Array<object>;
}
/**
 * The ordering to apply to the report. Default is ascending order for the data.
 * @export
 * @interface ReportOrdering
 */
export interface ReportOrdering {
    /**
     *
     * @type {string}
     * @memberof ReportOrdering
     */
    infrastructure?: ReportOrderingInfrastructureEnum;
    /**
     *
     * @type {string}
     * @memberof ReportOrdering
     */
    supplementary?: ReportOrderingSupplementaryEnum;
    /**
     *
     * @type {string}
     * @memberof ReportOrdering
     */
    cost?: ReportOrderingCostEnum;
    /**
     *
     * @type {string}
     * @memberof ReportOrdering
     */
    usage?: ReportOrderingUsageEnum;
    /**
     *
     * @type {string}
     * @memberof ReportOrdering
     */
    delta?: ReportOrderingDeltaEnum;
    /**
     *
     * @type {string}
     * @memberof ReportOrdering
     */
    account_alias?: ReportOrderingAccountAliasEnum;
    /**
     *
     * @type {string}
     * @memberof ReportOrdering
     */
    region?: ReportOrderingRegionEnum;
    /**
     *
     * @type {string}
     * @memberof ReportOrdering
     */
    service?: ReportOrderingServiceEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ReportOrderingInfrastructureEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportOrderingSupplementaryEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportOrderingCostEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportOrderingUsageEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportOrderingDeltaEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportOrderingAccountAliasEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportOrderingRegionEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportOrderingServiceEnum {
    Asc = 'asc',
    Desc = 'desc'
}

/**
 *
 * @export
 * @interface ReportPaginationMeta
 */
export interface ReportPaginationMeta {
    /**
     *
     * @type {number}
     * @memberof ReportPaginationMeta
     */
    count?: number;
    /**
     *
     * @type {ReportDelta}
     * @memberof ReportPaginationMeta
     */
    delta?: ReportDelta;
    /**
     *
     * @type {ReportGrouping | ReportAzureGrouping | ReportOpenShiftGrouping | ReportOpenShiftAWSGrouping | ReportOpenShiftAzureGrouping}
     * @memberof ReportPaginationMeta
     */
    group_by?: ReportGrouping | ReportAzureGrouping | ReportOpenShiftGrouping | ReportOpenShiftAWSGrouping | ReportOpenShiftAzureGrouping;
    /**
     *
     * @type {ReportOrdering | ReportAzureOrdering | ReportCostsOpenShiftOrdering | ReportInventoryOpenShiftOrdering | ReportOpenShiftAWSOrdering | ReportOpenShiftAzureOrdering}
     * @memberof ReportPaginationMeta
     */
    order_by?: ReportOrdering | ReportAzureOrdering | ReportCostsOpenShiftOrdering | ReportInventoryOpenShiftOrdering | ReportOpenShiftAWSOrdering | ReportOpenShiftAzureOrdering;
    /**
     *
     * @type {ReportFilter | ReportAzureFilter | ReportOpenShiftFilter | ReportOpenShiftAWSFilter | ReportOpenShiftAzureFilter}
     * @memberof ReportPaginationMeta
     */
    filter?: ReportFilter | ReportAzureFilter | ReportOpenShiftFilter | ReportOpenShiftAWSFilter | ReportOpenShiftAzureFilter;
    /**
     * The units for the output data.
     * @type {string}
     * @memberof ReportPaginationMeta
     */
    units?: string;
}
/**
 * The resolution to apply to the report. Default resolution is daily.
 * @export
 * @enum {string}
 */
export enum ReportResolution {
    Daily = 'daily',
    Monthly = 'monthly'
}

/**
 * The resources scope to apply to the report. Default resource scope is null, meaning no product or service filtering.
 * @export
 * @enum {string}
 */
export enum ReportResourceScope {
    EC2 = 'EC2',
    EBS = 'EBS',
    EFS = 'EFS',
    S3 = 'S3'
}

/**
 *
 * @export
 * @interface ReportStorageInventory
 */
export interface ReportStorageInventory extends Report {
    /**
     *
     * @type {Array<object>}
     * @memberof ReportStorageInventory
     */
    data: Array<object>;
}
/**
 *
 * @export
 * @interface ReportStorageInventoryAllOf
 */
export interface ReportStorageInventoryAllOf {
    /**
     *
     * @type {Array<object>}
     * @memberof ReportStorageInventoryAllOf
     */
    data: Array<object>;
}
/**
 * The units to apply to the report. Default time_scope_units is day.
 * @export
 * @enum {string}
 */
export enum ReportTimeScopeUnits {
    Day = 'day',
    Month = 'month'
}

/**
 * The time scope to apply to the report. Default time scope is \'-10\', meaning the last 10 days. Last 30 days would be \'-30\'. \'-10\' and \'-30\' are only valid when used with \'day\' time_scope_units.\'-1\' is used for current month, \'-2\' is used for last month when time_scope_units is \'month\' otherwise invalid.
 * @export
 * @enum {string}
 */
export enum ReportTimeScopeValue {
    NUMBER_MINUS_1 = -1,
    NUMBER_MINUS_2 = -2,
    NUMBER_MINUS_10 = -10,
    NUMBER_MINUS_30 = -30
}

/**
 *
 * @export
 * @interface SettingIn
 */
export interface SettingIn {
    /**
     *
     * @type {object}
     * @memberof SettingIn
     */
    api: object;
}
/**
 *
 * @export
 * @interface SettingOut
 */
export interface SettingOut {
    /**
     *
     * @type {Array<object>}
     * @memberof SettingOut
     */
    fields?: Array<object>;
    /**
     *
     * @type {string}
     * @memberof SettingOut
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof SettingOut
     */
    component?: string;
}
/**
 *
 * @export
 * @interface Source
 */
export interface Source {
    /**
     *
     * @type {number}
     * @memberof Source
     */
    id: number;
    /**
     *
     * @type {string}
     * @memberof Source
     */
    source_type: string;
}
/**
 *
 * @export
 * @interface SourceIn
 */
export interface SourceIn extends Source {
    /**
     * Dictionary containing resource name.
     * @type {object}
     * @memberof SourceIn
     */
    authentication: object;
    /**
     * Dictionary containing billing source.
     * @type {object}
     * @memberof SourceIn
     */
    billing_source: object;
}
/**
 *
 * @export
 * @interface SourceInAllOf
 */
export interface SourceInAllOf {
    /**
     * Dictionary containing resource name.
     * @type {object}
     * @memberof SourceInAllOf
     */
    authentication: object;
    /**
     * Dictionary containing billing source.
     * @type {object}
     * @memberof SourceInAllOf
     */
    billing_source: object;
}
/**
 *
 * @export
 * @interface SourceOut
 */
export interface SourceOut extends Source {
    /**
     *
     * @type {number}
     * @memberof SourceOut
     */
    id: number;
    /**
     *
     * @type {string}
     * @memberof SourceOut
     */
    uuid?: string;
    /**
     *
     * @type {string}
     * @memberof SourceOut
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof SourceOut
     */
    source_type?: string;
    /**
     * Dictionary containing resource name.
     * @type {object}
     * @memberof SourceOut
     */
    authentication?: object;
    /**
     * Dictionary containing billing source.
     * @type {object}
     * @memberof SourceOut
     */
    billing_source?: object;
    /**
     * Flag to indicate if provider is linked to source.
     * @type {boolean}
     * @memberof SourceOut
     */
    provider_linked?: boolean;
    /**
     * OpenShift foundational infrastructure type.
     * @type {string}
     * @memberof SourceOut
     */
    infrastructure?: string;
    /**
     * List of cost model name and UUIDs associated with this source.
     * @type {Array<SourceOutAllOfCostModels>}
     * @memberof SourceOut
     */
    cost_models?: Array<SourceOutAllOfCostModels>;
}
/**
 *
 * @export
 * @interface SourceOutAllOf
 */
export interface SourceOutAllOf {
    /**
     *
     * @type {number}
     * @memberof SourceOutAllOf
     */
    id: number;
    /**
     *
     * @type {string}
     * @memberof SourceOutAllOf
     */
    uuid?: string;
    /**
     *
     * @type {string}
     * @memberof SourceOutAllOf
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof SourceOutAllOf
     */
    source_type?: string;
    /**
     * Dictionary containing resource name.
     * @type {object}
     * @memberof SourceOutAllOf
     */
    authentication?: object;
    /**
     * Dictionary containing billing source.
     * @type {object}
     * @memberof SourceOutAllOf
     */
    billing_source?: object;
    /**
     * Flag to indicate if provider is linked to source.
     * @type {boolean}
     * @memberof SourceOutAllOf
     */
    provider_linked?: boolean;
    /**
     * OpenShift foundational infrastructure type.
     * @type {string}
     * @memberof SourceOutAllOf
     */
    infrastructure?: string;
    /**
     * List of cost model name and UUIDs associated with this source.
     * @type {Array<SourceOutAllOfCostModels>}
     * @memberof SourceOutAllOf
     */
    cost_models?: Array<SourceOutAllOfCostModels>;
}
/**
 *
 * @export
 * @interface SourceOutAllOfCostModels
 */
export interface SourceOutAllOfCostModels {
    /**
     *
     * @type {string}
     * @memberof SourceOutAllOfCostModels
     */
    uuid?: string;
    /**
     *
     * @type {string}
     * @memberof SourceOutAllOfCostModels
     */
    name?: string;
}
/**
 *
 * @export
 * @interface SourcePagination
 */
export interface SourcePagination extends ListPagination {
    /**
     *
     * @type {Array<SourceOut>}
     * @memberof SourcePagination
     */
    data: Array<SourceOut>;
}
/**
 *
 * @export
 * @interface SourcePaginationAllOf
 */
export interface SourcePaginationAllOf {
    /**
     *
     * @type {Array<SourceOut>}
     * @memberof SourcePaginationAllOf
     */
    data: Array<SourceOut>;
}
/**
 *
 * @export
 * @interface Status
 */
export interface Status {
    /**
     *
     * @type {number}
     * @memberof Status
     */
    api_version: number;
    /**
     *
     * @type {string}
     * @memberof Status
     */
    commit?: string;
    /**
     *
     * @type {string}
     * @memberof Status
     */
    server_address?: string;
    /**
     *
     * @type {number}
     * @memberof Status
     */
    rbac_cache_ttl?: number;
    /**
     *
     * @type {object}
     * @memberof Status
     */
    platform_info?: object;
    /**
     *
     * @type {string}
     * @memberof Status
     */
    python_version?: string;
    /**
     *
     * @type {object}
     * @memberof Status
     */
    modules?: object;
}
/**
 *
 * @export
 * @interface Tags
 */
export interface Tags {
    /**
     *
     * @type {TagsFilter}
     * @memberof Tags
     */
    filter?: TagsFilter;
    /**
     *
     * @type {Array<object>}
     * @memberof Tags
     */
    data?: Array<object>;
}
/**
 *
 * @export
 * @interface TagsFilter
 */
export interface TagsFilter {
    /**
     *
     * @type {ReportResolution}
     * @memberof TagsFilter
     */
    resolution?: ReportResolution;
    /**
     *
     * @type {ReportTimeScopeValue}
     * @memberof TagsFilter
     */
    time_scope_value?: ReportTimeScopeValue;
    /**
     *
     * @type {ReportTimeScopeUnits}
     * @memberof TagsFilter
     */
    time_scope_units?: ReportTimeScopeUnits;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {string}
     * @memberof User
     */
    username: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    email: string;
}
/**
 *
 * @export
 * @interface UserOut
 */
export interface UserOut extends User {
    /**
     *
     * @type {string}
     * @memberof UserOut
     */
    uuid: string;
}
/**
 *
 * @export
 * @interface UserOutAllOf
 */
export interface UserOutAllOf {
    /**
     *
     * @type {string}
     * @memberof UserOutAllOf
     */
    uuid: string;
}

/**
 * AWSReportsApi - axios parameter creator
 * @export
 */
export const AWSReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Query to obtain cost reports
         * @param {string} [delta] Toggle to include delta values in report.
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAWSCostReports(delta?: string, filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/reports/aws/costs/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (delta !== undefined) {
                localVarQueryParameter['delta'] = delta;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query to obtain AWS instance type data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {boolean} [computeCount] Toggle to include count values in report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAWSInstanceReports(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, computeCount?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/reports/aws/instance-types/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (units !== undefined) {
                localVarQueryParameter['units'] = units;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (computeCount !== undefined) {
                localVarQueryParameter['compute_count'] = computeCount;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query to obtain AWS storage data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAWSStorageReports(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/reports/aws/storage/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (units !== undefined) {
                localVarQueryParameter['units'] = units;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AWSReportsApi - functional programming interface
 * @export
 */
export const AWSReportsApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary Query to obtain cost reports
         * @param {string} [delta] Toggle to include delta values in report.
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAWSCostReports(delta?: string, filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportCost> {
            const localVarAxiosArgs = AWSReportsApiAxiosParamCreator(configuration).getAWSCostReports(delta, filter, groupBy, orderBy, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query to obtain AWS instance type data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {boolean} [computeCount] Toggle to include count values in report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAWSInstanceReports(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, computeCount?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportInstanceInventory> {
            const localVarAxiosArgs = AWSReportsApiAxiosParamCreator(configuration).getAWSInstanceReports(filter, groupBy, orderBy, units, offset, limit, computeCount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query to obtain AWS storage data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAWSStorageReports(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportStorageInventory> {
            const localVarAxiosArgs = AWSReportsApiAxiosParamCreator(configuration).getAWSStorageReports(filter, groupBy, orderBy, units, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AWSReportsApi - factory interface
 * @export
 */
export const AWSReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary Query to obtain cost reports
         * @param {string} [delta] Toggle to include delta values in report.
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAWSCostReports(delta?: string, filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options?: any): AxiosPromise<ReportCost> {
            return AWSReportsApiFp(configuration).getAWSCostReports(delta, filter, groupBy, orderBy, offset, limit, options)(axios, basePath);
        },
        /**
         *
         * @summary Query to obtain AWS instance type data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {boolean} [computeCount] Toggle to include count values in report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAWSInstanceReports(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, computeCount?: boolean, options?: any): AxiosPromise<ReportInstanceInventory> {
            return AWSReportsApiFp(configuration).getAWSInstanceReports(filter, groupBy, orderBy, units, offset, limit, computeCount, options)(axios, basePath);
        },
        /**
         *
         * @summary Query to obtain AWS storage data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAWSStorageReports(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options?: any): AxiosPromise<ReportStorageInventory> {
            return AWSReportsApiFp(configuration).getAWSStorageReports(filter, groupBy, orderBy, units, offset, limit, options)(axios, basePath);
        },
    };
};

/**
 * AWSReportsApi - object-oriented interface
 * @export
 * @class AWSReportsApi
 * @extends {BaseAPI}
 */
export class AWSReportsApi extends BaseAPI {
    /**
     *
     * @summary Query to obtain cost reports
     * @param {string} [delta] Toggle to include delta values in report.
     * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
     * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
     * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
     * @param {number} [offset] Parameter for selecting the offset of data.
     * @param {number} [limit] Parameter for selecting the amount of data in a returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AWSReportsApi
     */
    public getAWSCostReports(delta?: string, filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options?: any) {
        return AWSReportsApiFp(this.configuration).getAWSCostReports(delta, filter, groupBy, orderBy, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Query to obtain AWS instance type data
     * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
     * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
     * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
     * @param {string} [units] The units used to report data.
     * @param {number} [offset] Parameter for selecting the offset of data.
     * @param {number} [limit] Parameter for selecting the amount of data in a returned.
     * @param {boolean} [computeCount] Toggle to include count values in report.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AWSReportsApi
     */
    public getAWSInstanceReports(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, computeCount?: boolean, options?: any) {
        return AWSReportsApiFp(this.configuration).getAWSInstanceReports(filter, groupBy, orderBy, units, offset, limit, computeCount, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Query to obtain AWS storage data
     * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
     * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
     * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
     * @param {string} [units] The units used to report data.
     * @param {number} [offset] Parameter for selecting the offset of data.
     * @param {number} [limit] Parameter for selecting the amount of data in a returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AWSReportsApi
     */
    public getAWSStorageReports(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options?: any) {
        return AWSReportsApiFp(this.configuration).getAWSStorageReports(filter, groupBy, orderBy, units, offset, limit, options)(this.axios, this.basePath);
    }

}


/**
 * AzureReportsApi - axios parameter creator
 * @export
 */
export const AzureReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Query to obtain cost reports
         * @param {string} [delta] Toggle to include delta values in report.
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAzureCostReports(delta?: string, filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/reports/azure/costs/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (delta !== undefined) {
                localVarQueryParameter['delta'] = delta;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query to obtain Azure instance type data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAzureInstanceReports(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/reports/azure/instance-types/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (units !== undefined) {
                localVarQueryParameter['units'] = units;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query to obtain AWS storage data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAzureStorageReports(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/reports/azure/storage/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (units !== undefined) {
                localVarQueryParameter['units'] = units;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AzureReportsApi - functional programming interface
 * @export
 */
export const AzureReportsApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary Query to obtain cost reports
         * @param {string} [delta] Toggle to include delta values in report.
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAzureCostReports(delta?: string, filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportCost> {
            const localVarAxiosArgs = AzureReportsApiAxiosParamCreator(configuration).getAzureCostReports(delta, filter, groupBy, orderBy, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query to obtain Azure instance type data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAzureInstanceReports(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportInstanceInventory> {
            const localVarAxiosArgs = AzureReportsApiAxiosParamCreator(configuration).getAzureInstanceReports(filter, groupBy, orderBy, units, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query to obtain AWS storage data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAzureStorageReports(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportStorageInventory> {
            const localVarAxiosArgs = AzureReportsApiAxiosParamCreator(configuration).getAzureStorageReports(filter, groupBy, orderBy, units, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AzureReportsApi - factory interface
 * @export
 */
export const AzureReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary Query to obtain cost reports
         * @param {string} [delta] Toggle to include delta values in report.
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAzureCostReports(delta?: string, filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options?: any): AxiosPromise<ReportCost> {
            return AzureReportsApiFp(configuration).getAzureCostReports(delta, filter, groupBy, orderBy, offset, limit, options)(axios, basePath);
        },
        /**
         *
         * @summary Query to obtain Azure instance type data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAzureInstanceReports(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options?: any): AxiosPromise<ReportInstanceInventory> {
            return AzureReportsApiFp(configuration).getAzureInstanceReports(filter, groupBy, orderBy, units, offset, limit, options)(axios, basePath);
        },
        /**
         *
         * @summary Query to obtain AWS storage data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAzureStorageReports(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options?: any): AxiosPromise<ReportStorageInventory> {
            return AzureReportsApiFp(configuration).getAzureStorageReports(filter, groupBy, orderBy, units, offset, limit, options)(axios, basePath);
        },
    };
};

/**
 * AzureReportsApi - object-oriented interface
 * @export
 * @class AzureReportsApi
 * @extends {BaseAPI}
 */
export class AzureReportsApi extends BaseAPI {
    /**
     *
     * @summary Query to obtain cost reports
     * @param {string} [delta] Toggle to include delta values in report.
     * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
     * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
     * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
     * @param {number} [offset] Parameter for selecting the offset of data.
     * @param {number} [limit] Parameter for selecting the amount of data in a returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AzureReportsApi
     */
    public getAzureCostReports(delta?: string, filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options?: any) {
        return AzureReportsApiFp(this.configuration).getAzureCostReports(delta, filter, groupBy, orderBy, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Query to obtain Azure instance type data
     * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
     * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
     * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
     * @param {string} [units] The units used to report data.
     * @param {number} [offset] Parameter for selecting the offset of data.
     * @param {number} [limit] Parameter for selecting the amount of data in a returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AzureReportsApi
     */
    public getAzureInstanceReports(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options?: any) {
        return AzureReportsApiFp(this.configuration).getAzureInstanceReports(filter, groupBy, orderBy, units, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Query to obtain AWS storage data
     * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
     * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
     * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
     * @param {string} [units] The units used to report data.
     * @param {number} [offset] Parameter for selecting the offset of data.
     * @param {number} [limit] Parameter for selecting the amount of data in a returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AzureReportsApi
     */
    public getAzureStorageReports(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options?: any) {
        return AzureReportsApiFp(this.configuration).getAzureStorageReports(filter, groupBy, orderBy, units, offset, limit, options)(this.axios, this.basePath);
    }

}


/**
 * CostModelsApi - axios parameter creator
 * @export
 */
export const CostModelsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Create a new cost model.
         * @param {CostModel} costModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCostModel(costModel: CostModel, options: any = {}): RequestArgs {
            // verify required parameter 'costModel' is not null or undefined
            if (costModel === null || costModel === undefined) {
                throw new RequiredError('costModel','Required parameter costModel was null or undefined when calling createCostModel.');
            }
            const localVarPath = `/cost-models/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof costModel !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(costModel !== undefined ? costModel : {}) : (costModel || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete a Cost Model
         * @param {string} costModelUuid UUID of Cost Model to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCostModel(costModelUuid: string, options: any = {}): RequestArgs {
            // verify required parameter 'costModelUuid' is not null or undefined
            if (costModelUuid === null || costModelUuid === undefined) {
                throw new RequiredError('costModelUuid','Required parameter costModelUuid was null or undefined when calling deleteCostModel.');
            }
            const localVarPath = `/cost-models/{cost_model_uuid}/`
                .replace(`{${"cost_model_uuid"}}`, encodeURIComponent(String(costModelUuid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get a Cost Model.
         * @param {string} costModelUuid UUID of Cost Model to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCostModel(costModelUuid: string, options: any = {}): RequestArgs {
            // verify required parameter 'costModelUuid' is not null or undefined
            if (costModelUuid === null || costModelUuid === undefined) {
                throw new RequiredError('costModelUuid','Required parameter costModelUuid was null or undefined when calling getCostModel.');
            }
            const localVarPath = `/cost-models/{cost_model_uuid}/`
                .replace(`{${"cost_model_uuid"}}`, encodeURIComponent(String(costModelUuid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List the cost models
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {string} [sourceUuid] Filter response on source uuid.
         * @param {string} [sourceType] Filter response on source type.
         * @param {string} [name] Filter response on cost model name.
         * @param {string} [description] Filter response on cost model description.
         * @param {'name' | '-name' | 'source_type' | '-source_type' | 'updated_timestamp' | '-updated_timestamp'} [ordering] Order response on cost model by allowed fields.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCostModels(offset?: number, limit?: number, sourceUuid?: string, sourceType?: string, name?: string, description?: string, ordering?: 'name' | '-name' | 'source_type' | '-source_type' | 'updated_timestamp' | '-updated_timestamp', options: any = {}): RequestArgs {
            const localVarPath = `/cost-models/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sourceUuid !== undefined) {
                localVarQueryParameter['source_uuid'] = sourceUuid;
            }

            if (sourceType !== undefined) {
                localVarQueryParameter['source_type'] = sourceType;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update a Cost Model
         * @param {string} costModelUuid UUID of Cost Model to get
         * @param {CostModel} costModel Update to a Cost Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCostModel(costModelUuid: string, costModel: CostModel, options: any = {}): RequestArgs {
            // verify required parameter 'costModelUuid' is not null or undefined
            if (costModelUuid === null || costModelUuid === undefined) {
                throw new RequiredError('costModelUuid','Required parameter costModelUuid was null or undefined when calling updateCostModel.');
            }
            // verify required parameter 'costModel' is not null or undefined
            if (costModel === null || costModel === undefined) {
                throw new RequiredError('costModel','Required parameter costModel was null or undefined when calling updateCostModel.');
            }
            const localVarPath = `/cost-models/{cost_model_uuid}/`
                .replace(`{${"cost_model_uuid"}}`, encodeURIComponent(String(costModelUuid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof costModel !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(costModel !== undefined ? costModel : {}) : (costModel || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CostModelsApi - functional programming interface
 * @export
 */
export const CostModelsApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary Create a new cost model.
         * @param {CostModel} costModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCostModel(costModel: CostModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CostModelOut> {
            const localVarAxiosArgs = CostModelsApiAxiosParamCreator(configuration).createCostModel(costModel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Delete a Cost Model
         * @param {string} costModelUuid UUID of Cost Model to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCostModel(costModelUuid: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = CostModelsApiAxiosParamCreator(configuration).deleteCostModel(costModelUuid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get a Cost Model.
         * @param {string} costModelUuid UUID of Cost Model to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCostModel(costModelUuid: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CostModelOut> {
            const localVarAxiosArgs = CostModelsApiAxiosParamCreator(configuration).getCostModel(costModelUuid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List the cost models
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {string} [sourceUuid] Filter response on source uuid.
         * @param {string} [sourceType] Filter response on source type.
         * @param {string} [name] Filter response on cost model name.
         * @param {string} [description] Filter response on cost model description.
         * @param {'name' | '-name' | 'source_type' | '-source_type' | 'updated_timestamp' | '-updated_timestamp'} [ordering] Order response on cost model by allowed fields.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCostModels(offset?: number, limit?: number, sourceUuid?: string, sourceType?: string, name?: string, description?: string, ordering?: 'name' | '-name' | 'source_type' | '-source_type' | 'updated_timestamp' | '-updated_timestamp', options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CostModelPagination> {
            const localVarAxiosArgs = CostModelsApiAxiosParamCreator(configuration).listCostModels(offset, limit, sourceUuid, sourceType, name, description, ordering, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update a Cost Model
         * @param {string} costModelUuid UUID of Cost Model to get
         * @param {CostModel} costModel Update to a Cost Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCostModel(costModelUuid: string, costModel: CostModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CostModelOut> {
            const localVarAxiosArgs = CostModelsApiAxiosParamCreator(configuration).updateCostModel(costModelUuid, costModel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CostModelsApi - factory interface
 * @export
 */
export const CostModelsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary Create a new cost model.
         * @param {CostModel} costModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCostModel(costModel: CostModel, options?: any): AxiosPromise<CostModelOut> {
            return CostModelsApiFp(configuration).createCostModel(costModel, options)(axios, basePath);
        },
        /**
         *
         * @summary Delete a Cost Model
         * @param {string} costModelUuid UUID of Cost Model to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCostModel(costModelUuid: string, options?: any): AxiosPromise<void> {
            return CostModelsApiFp(configuration).deleteCostModel(costModelUuid, options)(axios, basePath);
        },
        /**
         *
         * @summary Get a Cost Model.
         * @param {string} costModelUuid UUID of Cost Model to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCostModel(costModelUuid: string, options?: any): AxiosPromise<CostModelOut> {
            return CostModelsApiFp(configuration).getCostModel(costModelUuid, options)(axios, basePath);
        },
        /**
         *
         * @summary List the cost models
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {string} [sourceUuid] Filter response on source uuid.
         * @param {string} [sourceType] Filter response on source type.
         * @param {string} [name] Filter response on cost model name.
         * @param {string} [description] Filter response on cost model description.
         * @param {'name' | '-name' | 'source_type' | '-source_type' | 'updated_timestamp' | '-updated_timestamp'} [ordering] Order response on cost model by allowed fields.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCostModels(offset?: number, limit?: number, sourceUuid?: string, sourceType?: string, name?: string, description?: string, ordering?: 'name' | '-name' | 'source_type' | '-source_type' | 'updated_timestamp' | '-updated_timestamp', options?: any): AxiosPromise<CostModelPagination> {
            return CostModelsApiFp(configuration).listCostModels(offset, limit, sourceUuid, sourceType, name, description, ordering, options)(axios, basePath);
        },
        /**
         *
         * @summary Update a Cost Model
         * @param {string} costModelUuid UUID of Cost Model to get
         * @param {CostModel} costModel Update to a Cost Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCostModel(costModelUuid: string, costModel: CostModel, options?: any): AxiosPromise<CostModelOut> {
            return CostModelsApiFp(configuration).updateCostModel(costModelUuid, costModel, options)(axios, basePath);
        },
    };
};

/**
 * CostModelsApi - object-oriented interface
 * @export
 * @class CostModelsApi
 * @extends {BaseAPI}
 */
export class CostModelsApi extends BaseAPI {
    /**
     *
     * @summary Create a new cost model.
     * @param {CostModel} costModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostModelsApi
     */
    public createCostModel(costModel: CostModel, options?: any) {
        return CostModelsApiFp(this.configuration).createCostModel(costModel, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Delete a Cost Model
     * @param {string} costModelUuid UUID of Cost Model to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostModelsApi
     */
    public deleteCostModel(costModelUuid: string, options?: any) {
        return CostModelsApiFp(this.configuration).deleteCostModel(costModelUuid, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Get a Cost Model.
     * @param {string} costModelUuid UUID of Cost Model to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostModelsApi
     */
    public getCostModel(costModelUuid: string, options?: any) {
        return CostModelsApiFp(this.configuration).getCostModel(costModelUuid, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary List the cost models
     * @param {number} [offset] Parameter for selecting the offset of data.
     * @param {number} [limit] Parameter for selecting the amount of data in a returned.
     * @param {string} [sourceUuid] Filter response on source uuid.
     * @param {string} [sourceType] Filter response on source type.
     * @param {string} [name] Filter response on cost model name.
     * @param {string} [description] Filter response on cost model description.
     * @param {'name' | '-name' | 'source_type' | '-source_type' | 'updated_timestamp' | '-updated_timestamp'} [ordering] Order response on cost model by allowed fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostModelsApi
     */
    public listCostModels(offset?: number, limit?: number, sourceUuid?: string, sourceType?: string, name?: string, description?: string, ordering?: 'name' | '-name' | 'source_type' | '-source_type' | 'updated_timestamp' | '-updated_timestamp', options?: any) {
        return CostModelsApiFp(this.configuration).listCostModels(offset, limit, sourceUuid, sourceType, name, description, ordering, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Update a Cost Model
     * @param {string} costModelUuid UUID of Cost Model to get
     * @param {CostModel} costModel Update to a Cost Model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostModelsApi
     */
    public updateCostModel(costModelUuid: string, costModel: CostModel, options?: any) {
        return CostModelsApiFp(this.configuration).updateCostModel(costModelUuid, costModel, options)(this.axios, this.basePath);
    }

}


/**
 * MetricsApi - axios parameter creator
 * @export
 */
export const MetricsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Obtain Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetrics(options: any = {}): RequestArgs {
            const localVarPath = `/metrics/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetricsApi - functional programming interface
 * @export
 */
export const MetricsApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary Obtain Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetrics(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Metrics> {
            const localVarAxiosArgs = MetricsApiAxiosParamCreator(configuration).getMetrics(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MetricsApi - factory interface
 * @export
 */
export const MetricsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary Obtain Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetrics(options?: any): AxiosPromise<Metrics> {
            return MetricsApiFp(configuration).getMetrics(options)(axios, basePath);
        },
    };
};

/**
 * MetricsApi - object-oriented interface
 * @export
 * @class MetricsApi
 * @extends {BaseAPI}
 */
export class MetricsApi extends BaseAPI {
    /**
     *
     * @summary Obtain Metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    public getMetrics(options?: any) {
        return MetricsApiFp(this.configuration).getMetrics(options)(this.axios, this.basePath);
    }

}


/**
 * OpenShiftReportsApi - axios parameter creator
 * @export
 */
export const OpenShiftReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Query to obtain OpenShift on AWS cost reports
         * @param {string} [delta] Toggle to include delta values in report.
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAWSCostReports(delta?: string, filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/reports/openshift/infrastructures/aws/costs/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (delta !== undefined) {
                localVarQueryParameter['delta'] = delta;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift on AWS instance data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAWSInventoryInstanceReport(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/reports/openshift/infrastructures/aws/instance-types/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (units !== undefined) {
                localVarQueryParameter['units'] = units;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift on AWS storage data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAWSInventoryStorageReport(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/reports/openshift/infrastructures/aws/storage/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (units !== undefined) {
                localVarQueryParameter['units'] = units;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift on all infrastructures cost reports
         * @param {string} [delta] Toggle to include delta values in report.
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAllCostReports(delta?: string, filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/reports/openshift/infrastructures/all/costs/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (delta !== undefined) {
                localVarQueryParameter['delta'] = delta;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift on all infrastructures instance data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAllInventoryInstanceReport(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/reports/openshift/infrastructures/all/instance-types/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (units !== undefined) {
                localVarQueryParameter['units'] = units;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift on all infrastructures storage data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAllInventoryStorageReport(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/reports/openshift/infrastructures/all/storage/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (units !== undefined) {
                localVarQueryParameter['units'] = units;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift on Azure cost reports
         * @param {string} [delta] Toggle to include delta values in report.
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAzureCostReports(delta?: string, filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/reports/openshift/infrastructures/azure/costs/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (delta !== undefined) {
                localVarQueryParameter['delta'] = delta;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift on Azure instance data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAzureInventoryInstanceReport(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/reports/openshift/infrastructures/azure/instance-types/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (units !== undefined) {
                localVarQueryParameter['units'] = units;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift on Azure storage data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAzureInventoryStorageReport(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/reports/openshift/infrastructures/azure/storage/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (units !== undefined) {
                localVarQueryParameter['units'] = units;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift compute usage information
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftComputeReports(filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/reports/openshift/compute/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query to obtain cost reports
         * @param {string} [delta] Toggle to include delta values in report.
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftCostReports(delta?: string, filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/reports/openshift/costs/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (delta !== undefined) {
                localVarQueryParameter['delta'] = delta;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift memory usage information
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftMemoryReports(filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/reports/openshift/memory/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift volume usage information
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftVolumeReports(filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/reports/openshift/volumes/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OpenShiftReportsApi - functional programming interface
 * @export
 */
export const OpenShiftReportsApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary Query to obtain OpenShift on AWS cost reports
         * @param {string} [delta] Toggle to include delta values in report.
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAWSCostReports(delta?: string, filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportCosts> {
            const localVarAxiosArgs = OpenShiftReportsApiAxiosParamCreator(configuration).getOpenShiftAWSCostReports(delta, filter, groupBy, orderBy, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift on AWS instance data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAWSInventoryInstanceReport(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportOpenShiftAWSInstanceInventory> {
            const localVarAxiosArgs = OpenShiftReportsApiAxiosParamCreator(configuration).getOpenShiftAWSInventoryInstanceReport(filter, groupBy, orderBy, units, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift on AWS storage data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAWSInventoryStorageReport(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportOpenShiftAWSStorageInventory> {
            const localVarAxiosArgs = OpenShiftReportsApiAxiosParamCreator(configuration).getOpenShiftAWSInventoryStorageReport(filter, groupBy, orderBy, units, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift on all infrastructures cost reports
         * @param {string} [delta] Toggle to include delta values in report.
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAllCostReports(delta?: string, filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportCosts> {
            const localVarAxiosArgs = OpenShiftReportsApiAxiosParamCreator(configuration).getOpenShiftAllCostReports(delta, filter, groupBy, orderBy, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift on all infrastructures instance data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAllInventoryInstanceReport(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportOpenShiftAllInstanceInventory> {
            const localVarAxiosArgs = OpenShiftReportsApiAxiosParamCreator(configuration).getOpenShiftAllInventoryInstanceReport(filter, groupBy, orderBy, units, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift on all infrastructures storage data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAllInventoryStorageReport(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportOpenShiftAllStorageInventory> {
            const localVarAxiosArgs = OpenShiftReportsApiAxiosParamCreator(configuration).getOpenShiftAllInventoryStorageReport(filter, groupBy, orderBy, units, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift on Azure cost reports
         * @param {string} [delta] Toggle to include delta values in report.
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAzureCostReports(delta?: string, filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportCosts> {
            const localVarAxiosArgs = OpenShiftReportsApiAxiosParamCreator(configuration).getOpenShiftAzureCostReports(delta, filter, groupBy, orderBy, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift on Azure instance data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAzureInventoryInstanceReport(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportOpenShiftAzureInstanceInventory> {
            const localVarAxiosArgs = OpenShiftReportsApiAxiosParamCreator(configuration).getOpenShiftAzureInventoryInstanceReport(filter, groupBy, orderBy, units, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift on Azure storage data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAzureInventoryStorageReport(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportOpenShiftAzureStorageInventory> {
            const localVarAxiosArgs = OpenShiftReportsApiAxiosParamCreator(configuration).getOpenShiftAzureInventoryStorageReport(filter, groupBy, orderBy, units, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift compute usage information
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftComputeReports(filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportOpenShiftCpu> {
            const localVarAxiosArgs = OpenShiftReportsApiAxiosParamCreator(configuration).getOpenShiftComputeReports(filter, groupBy, orderBy, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query to obtain cost reports
         * @param {string} [delta] Toggle to include delta values in report.
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftCostReports(delta?: string, filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportCost> {
            const localVarAxiosArgs = OpenShiftReportsApiAxiosParamCreator(configuration).getOpenShiftCostReports(delta, filter, groupBy, orderBy, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift memory usage information
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftMemoryReports(filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportOpenShiftMemory> {
            const localVarAxiosArgs = OpenShiftReportsApiAxiosParamCreator(configuration).getOpenShiftMemoryReports(filter, groupBy, orderBy, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift volume usage information
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftVolumeReports(filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportOpenShiftVolume> {
            const localVarAxiosArgs = OpenShiftReportsApiAxiosParamCreator(configuration).getOpenShiftVolumeReports(filter, groupBy, orderBy, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OpenShiftReportsApi - factory interface
 * @export
 */
export const OpenShiftReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary Query to obtain OpenShift on AWS cost reports
         * @param {string} [delta] Toggle to include delta values in report.
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAWSCostReports(delta?: string, filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options?: any): AxiosPromise<ReportCosts> {
            return OpenShiftReportsApiFp(configuration).getOpenShiftAWSCostReports(delta, filter, groupBy, orderBy, offset, limit, options)(axios, basePath);
        },
        /**
         *
         * @summary Query to obtain OpenShift on AWS instance data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAWSInventoryInstanceReport(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options?: any): AxiosPromise<ReportOpenShiftAWSInstanceInventory> {
            return OpenShiftReportsApiFp(configuration).getOpenShiftAWSInventoryInstanceReport(filter, groupBy, orderBy, units, offset, limit, options)(axios, basePath);
        },
        /**
         *
         * @summary Query to obtain OpenShift on AWS storage data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAWSInventoryStorageReport(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options?: any): AxiosPromise<ReportOpenShiftAWSStorageInventory> {
            return OpenShiftReportsApiFp(configuration).getOpenShiftAWSInventoryStorageReport(filter, groupBy, orderBy, units, offset, limit, options)(axios, basePath);
        },
        /**
         *
         * @summary Query to obtain OpenShift on all infrastructures cost reports
         * @param {string} [delta] Toggle to include delta values in report.
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAllCostReports(delta?: string, filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options?: any): AxiosPromise<ReportCosts> {
            return OpenShiftReportsApiFp(configuration).getOpenShiftAllCostReports(delta, filter, groupBy, orderBy, offset, limit, options)(axios, basePath);
        },
        /**
         *
         * @summary Query to obtain OpenShift on all infrastructures instance data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAllInventoryInstanceReport(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options?: any): AxiosPromise<ReportOpenShiftAllInstanceInventory> {
            return OpenShiftReportsApiFp(configuration).getOpenShiftAllInventoryInstanceReport(filter, groupBy, orderBy, units, offset, limit, options)(axios, basePath);
        },
        /**
         *
         * @summary Query to obtain OpenShift on all infrastructures storage data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAllInventoryStorageReport(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options?: any): AxiosPromise<ReportOpenShiftAllStorageInventory> {
            return OpenShiftReportsApiFp(configuration).getOpenShiftAllInventoryStorageReport(filter, groupBy, orderBy, units, offset, limit, options)(axios, basePath);
        },
        /**
         *
         * @summary Query to obtain OpenShift on Azure cost reports
         * @param {string} [delta] Toggle to include delta values in report.
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAzureCostReports(delta?: string, filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options?: any): AxiosPromise<ReportCosts> {
            return OpenShiftReportsApiFp(configuration).getOpenShiftAzureCostReports(delta, filter, groupBy, orderBy, offset, limit, options)(axios, basePath);
        },
        /**
         *
         * @summary Query to obtain OpenShift on Azure instance data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAzureInventoryInstanceReport(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options?: any): AxiosPromise<ReportOpenShiftAzureInstanceInventory> {
            return OpenShiftReportsApiFp(configuration).getOpenShiftAzureInventoryInstanceReport(filter, groupBy, orderBy, units, offset, limit, options)(axios, basePath);
        },
        /**
         *
         * @summary Query to obtain OpenShift on Azure storage data
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {string} [units] The units used to report data.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAzureInventoryStorageReport(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options?: any): AxiosPromise<ReportOpenShiftAzureStorageInventory> {
            return OpenShiftReportsApiFp(configuration).getOpenShiftAzureInventoryStorageReport(filter, groupBy, orderBy, units, offset, limit, options)(axios, basePath);
        },
        /**
         *
         * @summary Query to obtain OpenShift compute usage information
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftComputeReports(filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options?: any): AxiosPromise<ReportOpenShiftCpu> {
            return OpenShiftReportsApiFp(configuration).getOpenShiftComputeReports(filter, groupBy, orderBy, offset, limit, options)(axios, basePath);
        },
        /**
         *
         * @summary Query to obtain cost reports
         * @param {string} [delta] Toggle to include delta values in report.
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftCostReports(delta?: string, filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options?: any): AxiosPromise<ReportCost> {
            return OpenShiftReportsApiFp(configuration).getOpenShiftCostReports(delta, filter, groupBy, orderBy, offset, limit, options)(axios, basePath);
        },
        /**
         *
         * @summary Query to obtain OpenShift memory usage information
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftMemoryReports(filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options?: any): AxiosPromise<ReportOpenShiftMemory> {
            return OpenShiftReportsApiFp(configuration).getOpenShiftMemoryReports(filter, groupBy, orderBy, offset, limit, options)(axios, basePath);
        },
        /**
         *
         * @summary Query to obtain OpenShift volume usage information
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
         * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftVolumeReports(filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options?: any): AxiosPromise<ReportOpenShiftVolume> {
            return OpenShiftReportsApiFp(configuration).getOpenShiftVolumeReports(filter, groupBy, orderBy, offset, limit, options)(axios, basePath);
        },
    };
};

/**
 * OpenShiftReportsApi - object-oriented interface
 * @export
 * @class OpenShiftReportsApi
 * @extends {BaseAPI}
 */
export class OpenShiftReportsApi extends BaseAPI {
    /**
     *
     * @summary Query to obtain OpenShift on AWS cost reports
     * @param {string} [delta] Toggle to include delta values in report.
     * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
     * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
     * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
     * @param {number} [offset] Parameter for selecting the offset of data.
     * @param {number} [limit] Parameter for selecting the amount of data in a returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenShiftReportsApi
     */
    public getOpenShiftAWSCostReports(delta?: string, filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options?: any) {
        return OpenShiftReportsApiFp(this.configuration).getOpenShiftAWSCostReports(delta, filter, groupBy, orderBy, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Query to obtain OpenShift on AWS instance data
     * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
     * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
     * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
     * @param {string} [units] The units used to report data.
     * @param {number} [offset] Parameter for selecting the offset of data.
     * @param {number} [limit] Parameter for selecting the amount of data in a returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenShiftReportsApi
     */
    public getOpenShiftAWSInventoryInstanceReport(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options?: any) {
        return OpenShiftReportsApiFp(this.configuration).getOpenShiftAWSInventoryInstanceReport(filter, groupBy, orderBy, units, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Query to obtain OpenShift on AWS storage data
     * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
     * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
     * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
     * @param {string} [units] The units used to report data.
     * @param {number} [offset] Parameter for selecting the offset of data.
     * @param {number} [limit] Parameter for selecting the amount of data in a returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenShiftReportsApi
     */
    public getOpenShiftAWSInventoryStorageReport(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options?: any) {
        return OpenShiftReportsApiFp(this.configuration).getOpenShiftAWSInventoryStorageReport(filter, groupBy, orderBy, units, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Query to obtain OpenShift on all infrastructures cost reports
     * @param {string} [delta] Toggle to include delta values in report.
     * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
     * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
     * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
     * @param {number} [offset] Parameter for selecting the offset of data.
     * @param {number} [limit] Parameter for selecting the amount of data in a returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenShiftReportsApi
     */
    public getOpenShiftAllCostReports(delta?: string, filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options?: any) {
        return OpenShiftReportsApiFp(this.configuration).getOpenShiftAllCostReports(delta, filter, groupBy, orderBy, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Query to obtain OpenShift on all infrastructures instance data
     * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
     * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
     * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
     * @param {string} [units] The units used to report data.
     * @param {number} [offset] Parameter for selecting the offset of data.
     * @param {number} [limit] Parameter for selecting the amount of data in a returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenShiftReportsApi
     */
    public getOpenShiftAllInventoryInstanceReport(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options?: any) {
        return OpenShiftReportsApiFp(this.configuration).getOpenShiftAllInventoryInstanceReport(filter, groupBy, orderBy, units, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Query to obtain OpenShift on all infrastructures storage data
     * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
     * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
     * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
     * @param {string} [units] The units used to report data.
     * @param {number} [offset] Parameter for selecting the offset of data.
     * @param {number} [limit] Parameter for selecting the amount of data in a returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenShiftReportsApi
     */
    public getOpenShiftAllInventoryStorageReport(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options?: any) {
        return OpenShiftReportsApiFp(this.configuration).getOpenShiftAllInventoryStorageReport(filter, groupBy, orderBy, units, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Query to obtain OpenShift on Azure cost reports
     * @param {string} [delta] Toggle to include delta values in report.
     * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
     * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
     * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
     * @param {number} [offset] Parameter for selecting the offset of data.
     * @param {number} [limit] Parameter for selecting the amount of data in a returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenShiftReportsApi
     */
    public getOpenShiftAzureCostReports(delta?: string, filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options?: any) {
        return OpenShiftReportsApiFp(this.configuration).getOpenShiftAzureCostReports(delta, filter, groupBy, orderBy, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Query to obtain OpenShift on Azure instance data
     * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
     * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
     * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
     * @param {string} [units] The units used to report data.
     * @param {number} [offset] Parameter for selecting the offset of data.
     * @param {number} [limit] Parameter for selecting the amount of data in a returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenShiftReportsApi
     */
    public getOpenShiftAzureInventoryInstanceReport(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options?: any) {
        return OpenShiftReportsApiFp(this.configuration).getOpenShiftAzureInventoryInstanceReport(filter, groupBy, orderBy, units, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Query to obtain OpenShift on Azure storage data
     * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
     * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
     * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
     * @param {string} [units] The units used to report data.
     * @param {number} [offset] Parameter for selecting the offset of data.
     * @param {number} [limit] Parameter for selecting the amount of data in a returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenShiftReportsApi
     */
    public getOpenShiftAzureInventoryStorageReport(filter?: object, groupBy?: object, orderBy?: object, units?: string, offset?: number, limit?: number, options?: any) {
        return OpenShiftReportsApiFp(this.configuration).getOpenShiftAzureInventoryStorageReport(filter, groupBy, orderBy, units, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Query to obtain OpenShift compute usage information
     * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
     * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
     * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
     * @param {number} [offset] Parameter for selecting the offset of data.
     * @param {number} [limit] Parameter for selecting the amount of data in a returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenShiftReportsApi
     */
    public getOpenShiftComputeReports(filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options?: any) {
        return OpenShiftReportsApiFp(this.configuration).getOpenShiftComputeReports(filter, groupBy, orderBy, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Query to obtain cost reports
     * @param {string} [delta] Toggle to include delta values in report.
     * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
     * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
     * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
     * @param {number} [offset] Parameter for selecting the offset of data.
     * @param {number} [limit] Parameter for selecting the amount of data in a returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenShiftReportsApi
     */
    public getOpenShiftCostReports(delta?: string, filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options?: any) {
        return OpenShiftReportsApiFp(this.configuration).getOpenShiftCostReports(delta, filter, groupBy, orderBy, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Query to obtain OpenShift memory usage information
     * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
     * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
     * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
     * @param {number} [offset] Parameter for selecting the offset of data.
     * @param {number} [limit] Parameter for selecting the amount of data in a returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenShiftReportsApi
     */
    public getOpenShiftMemoryReports(filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options?: any) {
        return OpenShiftReportsApiFp(this.configuration).getOpenShiftMemoryReports(filter, groupBy, orderBy, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Query to obtain OpenShift volume usage information
     * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
     * @param {object} [groupBy] The grouping to apply to the report as a URL encoded dictionary.
     * @param {object} [orderBy] The ordering to apply to the report as a URL encoded dictionary.
     * @param {number} [offset] Parameter for selecting the offset of data.
     * @param {number} [limit] Parameter for selecting the amount of data in a returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenShiftReportsApi
     */
    public getOpenShiftVolumeReports(filter?: object, groupBy?: object, orderBy?: object, offset?: number, limit?: number, options?: any) {
        return OpenShiftReportsApiFp(this.configuration).getOpenShiftVolumeReports(filter, groupBy, orderBy, offset, limit, options)(this.axios, this.basePath);
    }

}


/**
 * SettingsApi - axios parameter creator
 * @export
 */
export const SettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Assign to cost management settings
         * @param {SettingIn} settingIn Application settings that needs to stored
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignSettings(settingIn: SettingIn, options: any = {}): RequestArgs {
            // verify required parameter 'settingIn' is not null or undefined
            if (settingIn === null || settingIn === undefined) {
                throw new RequiredError('settingIn','Required parameter settingIn was null or undefined when calling assignSettings.');
            }
            const localVarPath = `/settings/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof settingIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settingIn !== undefined ? settingIn : {}) : (settingIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query to cost management settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettings(options: any = {}): RequestArgs {
            const localVarPath = `/settings/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SettingsApi - functional programming interface
 * @export
 */
export const SettingsApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary Assign to cost management settings
         * @param {SettingIn} settingIn Application settings that needs to stored
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignSettings(settingIn: SettingIn, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).assignSettings(settingIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query to cost management settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettings(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SettingOut>> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).getSettings(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SettingsApi - factory interface
 * @export
 */
export const SettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary Assign to cost management settings
         * @param {SettingIn} settingIn Application settings that needs to stored
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignSettings(settingIn: SettingIn, options?: any): AxiosPromise<void> {
            return SettingsApiFp(configuration).assignSettings(settingIn, options)(axios, basePath);
        },
        /**
         *
         * @summary Query to cost management settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettings(options?: any): AxiosPromise<Array<SettingOut>> {
            return SettingsApiFp(configuration).getSettings(options)(axios, basePath);
        },
    };
};

/**
 * SettingsApi - object-oriented interface
 * @export
 * @class SettingsApi
 * @extends {BaseAPI}
 */
export class SettingsApi extends BaseAPI {
    /**
     *
     * @summary Assign to cost management settings
     * @param {SettingIn} settingIn Application settings that needs to stored
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public assignSettings(settingIn: SettingIn, options?: any) {
        return SettingsApiFp(this.configuration).assignSettings(settingIn, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Query to cost management settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public getSettings(options?: any) {
        return SettingsApiFp(this.configuration).getSettings(options)(this.axios, this.basePath);
    }

}


/**
 * SourcesApi - axios parameter creator
 * @export
 */
export const SourcesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Get a source
         * @param {number} sourceId ID of source to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSource(sourceId: number, options: any = {}): RequestArgs {
            // verify required parameter 'sourceId' is not null or undefined
            if (sourceId === null || sourceId === undefined) {
                throw new RequiredError('sourceId','Required parameter sourceId was null or undefined when calling getSource.');
            }
            const localVarPath = `/sources/{source_id}/`
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get a source statistics
         * @param {number} sourceId ID of source to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSourceStats(sourceId: number, options: any = {}): RequestArgs {
            // verify required parameter 'sourceId' is not null or undefined
            if (sourceId === null || sourceId === undefined) {
                throw new RequiredError('sourceId','Required parameter sourceId was null or undefined when calling getSourceStats.');
            }
            const localVarPath = `/sources/{source_id}/stats/`
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List the sources
         * @param {string} [type] The type of source to filter for.
         * @param {string} [name] The name of the source to filter for.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSources(type?: string, name?: string, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/sources/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update a source
         * @param {number} sourceId ID of source to update
         * @param {SourceIn} sourceIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSource(sourceId: number, sourceIn: SourceIn, options: any = {}): RequestArgs {
            // verify required parameter 'sourceId' is not null or undefined
            if (sourceId === null || sourceId === undefined) {
                throw new RequiredError('sourceId','Required parameter sourceId was null or undefined when calling updateSource.');
            }
            // verify required parameter 'sourceIn' is not null or undefined
            if (sourceIn === null || sourceIn === undefined) {
                throw new RequiredError('sourceIn','Required parameter sourceIn was null or undefined when calling updateSource.');
            }
            const localVarPath = `/sources/{source_id}/`
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof sourceIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(sourceIn !== undefined ? sourceIn : {}) : (sourceIn || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SourcesApi - functional programming interface
 * @export
 */
export const SourcesApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary Get a source
         * @param {number} sourceId ID of source to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSource(sourceId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceOut> {
            const localVarAxiosArgs = SourcesApiAxiosParamCreator(configuration).getSource(sourceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get a source statistics
         * @param {number} sourceId ID of source to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSourceStats(sourceId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = SourcesApiAxiosParamCreator(configuration).getSourceStats(sourceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List the sources
         * @param {string} [type] The type of source to filter for.
         * @param {string} [name] The name of the source to filter for.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSources(type?: string, name?: string, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourcePagination> {
            const localVarAxiosArgs = SourcesApiAxiosParamCreator(configuration).listSources(type, name, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update a source
         * @param {number} sourceId ID of source to update
         * @param {SourceIn} sourceIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSource(sourceId: number, sourceIn: SourceIn, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceOut> {
            const localVarAxiosArgs = SourcesApiAxiosParamCreator(configuration).updateSource(sourceId, sourceIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SourcesApi - factory interface
 * @export
 */
export const SourcesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary Get a source
         * @param {number} sourceId ID of source to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSource(sourceId: number, options?: any): AxiosPromise<SourceOut> {
            return SourcesApiFp(configuration).getSource(sourceId, options)(axios, basePath);
        },
        /**
         *
         * @summary Get a source statistics
         * @param {number} sourceId ID of source to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSourceStats(sourceId: number, options?: any): AxiosPromise<object> {
            return SourcesApiFp(configuration).getSourceStats(sourceId, options)(axios, basePath);
        },
        /**
         *
         * @summary List the sources
         * @param {string} [type] The type of source to filter for.
         * @param {string} [name] The name of the source to filter for.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSources(type?: string, name?: string, offset?: number, limit?: number, options?: any): AxiosPromise<SourcePagination> {
            return SourcesApiFp(configuration).listSources(type, name, offset, limit, options)(axios, basePath);
        },
        /**
         *
         * @summary Update a source
         * @param {number} sourceId ID of source to update
         * @param {SourceIn} sourceIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSource(sourceId: number, sourceIn: SourceIn, options?: any): AxiosPromise<SourceOut> {
            return SourcesApiFp(configuration).updateSource(sourceId, sourceIn, options)(axios, basePath);
        },
    };
};

/**
 * SourcesApi - object-oriented interface
 * @export
 * @class SourcesApi
 * @extends {BaseAPI}
 */
export class SourcesApi extends BaseAPI {
    /**
     *
     * @summary Get a source
     * @param {number} sourceId ID of source to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    public getSource(sourceId: number, options?: any) {
        return SourcesApiFp(this.configuration).getSource(sourceId, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Get a source statistics
     * @param {number} sourceId ID of source to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    public getSourceStats(sourceId: number, options?: any) {
        return SourcesApiFp(this.configuration).getSourceStats(sourceId, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary List the sources
     * @param {string} [type] The type of source to filter for.
     * @param {string} [name] The name of the source to filter for.
     * @param {number} [offset] Parameter for selecting the offset of data.
     * @param {number} [limit] Parameter for selecting the amount of data in a returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    public listSources(type?: string, name?: string, offset?: number, limit?: number, options?: any) {
        return SourcesApiFp(this.configuration).listSources(type, name, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Update a source
     * @param {number} sourceId ID of source to update
     * @param {SourceIn} sourceIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    public updateSource(sourceId: number, sourceIn: SourceIn, options?: any) {
        return SourcesApiFp(this.configuration).updateSource(sourceId, sourceIn, options)(this.axios, this.basePath);
    }

}


/**
 * StatusApi - axios parameter creator
 * @export
 */
export const StatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Obtain server status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus(options: any = {}): RequestArgs {
            const localVarPath = `/status/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatusApi - functional programming interface
 * @export
 */
export const StatusApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary Obtain server status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Status> {
            const localVarAxiosArgs = StatusApiAxiosParamCreator(configuration).getStatus(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * StatusApi - factory interface
 * @export
 */
export const StatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary Obtain server status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus(options?: any): AxiosPromise<Status> {
            return StatusApiFp(configuration).getStatus(options)(axios, basePath);
        },
    };
};

/**
 * StatusApi - object-oriented interface
 * @export
 * @class StatusApi
 * @extends {BaseAPI}
 */
export class StatusApi extends BaseAPI {
    /**
     *
     * @summary Obtain server status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApi
     */
    public getStatus(options?: any) {
        return StatusApiFp(this.configuration).getStatus(options)(this.axios, this.basePath);
    }

}


/**
 * TagsApi - axios parameter creator
 * @export
 */
export const TagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Query to obtain AWS tags
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {boolean} [keyOnly] Flag to indicate whether or not only the tag key values will be returned.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAWSTagData(filter?: object, keyOnly?: boolean, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/tags/aws/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (keyOnly !== undefined) {
                localVarQueryParameter['key_only'] = keyOnly;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query to obtain AWS tags
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {boolean} [keyOnly] Flag to indicate whether or not only the tag key values will be returned.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAzureTagData(filter?: object, keyOnly?: boolean, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/tags/azure/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (keyOnly !== undefined) {
                localVarQueryParameter['key_only'] = keyOnly;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift-on-AWS tags
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {boolean} [keyOnly] Flag to indicate whether or not only the tag key values will be returned.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAWSTagData(filter?: object, keyOnly?: boolean, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/tags/openshift/infrastructures/aws/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (keyOnly !== undefined) {
                localVarQueryParameter['key_only'] = keyOnly;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift-on-All tags
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {boolean} [keyOnly] Flag to indicate whether or not only the tag key values will be returned.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAllTagData(filter?: object, keyOnly?: boolean, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/tags/openshift/infrastructures/all/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (keyOnly !== undefined) {
                localVarQueryParameter['key_only'] = keyOnly;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift-on-Azure tags
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {boolean} [keyOnly] Flag to indicate whether or not only the tag key values will be returned.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAzureTagData(filter?: object, keyOnly?: boolean, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/tags/openshift/infrastructures/azure/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (keyOnly !== undefined) {
                localVarQueryParameter['key_only'] = keyOnly;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift tags
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {boolean} [keyOnly] Flag to indicate whether or not only the tag key values will be returned.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftTagData(filter?: object, keyOnly?: boolean, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/tags/openshift/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (keyOnly !== undefined) {
                localVarQueryParameter['key_only'] = keyOnly;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagsApi - functional programming interface
 * @export
 */
export const TagsApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary Query to obtain AWS tags
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {boolean} [keyOnly] Flag to indicate whether or not only the tag key values will be returned.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAWSTagData(filter?: object, keyOnly?: boolean, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tags> {
            const localVarAxiosArgs = TagsApiAxiosParamCreator(configuration).getAWSTagData(filter, keyOnly, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query to obtain AWS tags
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {boolean} [keyOnly] Flag to indicate whether or not only the tag key values will be returned.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAzureTagData(filter?: object, keyOnly?: boolean, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tags> {
            const localVarAxiosArgs = TagsApiAxiosParamCreator(configuration).getAzureTagData(filter, keyOnly, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift-on-AWS tags
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {boolean} [keyOnly] Flag to indicate whether or not only the tag key values will be returned.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAWSTagData(filter?: object, keyOnly?: boolean, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tags> {
            const localVarAxiosArgs = TagsApiAxiosParamCreator(configuration).getOpenShiftAWSTagData(filter, keyOnly, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift-on-All tags
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {boolean} [keyOnly] Flag to indicate whether or not only the tag key values will be returned.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAllTagData(filter?: object, keyOnly?: boolean, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tags> {
            const localVarAxiosArgs = TagsApiAxiosParamCreator(configuration).getOpenShiftAllTagData(filter, keyOnly, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift-on-Azure tags
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {boolean} [keyOnly] Flag to indicate whether or not only the tag key values will be returned.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAzureTagData(filter?: object, keyOnly?: boolean, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tags> {
            const localVarAxiosArgs = TagsApiAxiosParamCreator(configuration).getOpenShiftAzureTagData(filter, keyOnly, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query to obtain OpenShift tags
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {boolean} [keyOnly] Flag to indicate whether or not only the tag key values will be returned.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftTagData(filter?: object, keyOnly?: boolean, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tags> {
            const localVarAxiosArgs = TagsApiAxiosParamCreator(configuration).getOpenShiftTagData(filter, keyOnly, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TagsApi - factory interface
 * @export
 */
export const TagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary Query to obtain AWS tags
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {boolean} [keyOnly] Flag to indicate whether or not only the tag key values will be returned.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAWSTagData(filter?: object, keyOnly?: boolean, offset?: number, limit?: number, options?: any): AxiosPromise<Tags> {
            return TagsApiFp(configuration).getAWSTagData(filter, keyOnly, offset, limit, options)(axios, basePath);
        },
        /**
         *
         * @summary Query to obtain AWS tags
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {boolean} [keyOnly] Flag to indicate whether or not only the tag key values will be returned.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAzureTagData(filter?: object, keyOnly?: boolean, offset?: number, limit?: number, options?: any): AxiosPromise<Tags> {
            return TagsApiFp(configuration).getAzureTagData(filter, keyOnly, offset, limit, options)(axios, basePath);
        },
        /**
         *
         * @summary Query to obtain OpenShift-on-AWS tags
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {boolean} [keyOnly] Flag to indicate whether or not only the tag key values will be returned.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAWSTagData(filter?: object, keyOnly?: boolean, offset?: number, limit?: number, options?: any): AxiosPromise<Tags> {
            return TagsApiFp(configuration).getOpenShiftAWSTagData(filter, keyOnly, offset, limit, options)(axios, basePath);
        },
        /**
         *
         * @summary Query to obtain OpenShift-on-All tags
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {boolean} [keyOnly] Flag to indicate whether or not only the tag key values will be returned.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAllTagData(filter?: object, keyOnly?: boolean, offset?: number, limit?: number, options?: any): AxiosPromise<Tags> {
            return TagsApiFp(configuration).getOpenShiftAllTagData(filter, keyOnly, offset, limit, options)(axios, basePath);
        },
        /**
         *
         * @summary Query to obtain OpenShift-on-Azure tags
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {boolean} [keyOnly] Flag to indicate whether or not only the tag key values will be returned.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftAzureTagData(filter?: object, keyOnly?: boolean, offset?: number, limit?: number, options?: any): AxiosPromise<Tags> {
            return TagsApiFp(configuration).getOpenShiftAzureTagData(filter, keyOnly, offset, limit, options)(axios, basePath);
        },
        /**
         *
         * @summary Query to obtain OpenShift tags
         * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
         * @param {boolean} [keyOnly] Flag to indicate whether or not only the tag key values will be returned.
         * @param {number} [offset] Parameter for selecting the offset of data.
         * @param {number} [limit] Parameter for selecting the amount of data in a returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenShiftTagData(filter?: object, keyOnly?: boolean, offset?: number, limit?: number, options?: any): AxiosPromise<Tags> {
            return TagsApiFp(configuration).getOpenShiftTagData(filter, keyOnly, offset, limit, options)(axios, basePath);
        },
    };
};

/**
 * TagsApi - object-oriented interface
 * @export
 * @class TagsApi
 * @extends {BaseAPI}
 */
export class TagsApi extends BaseAPI {
    /**
     *
     * @summary Query to obtain AWS tags
     * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
     * @param {boolean} [keyOnly] Flag to indicate whether or not only the tag key values will be returned.
     * @param {number} [offset] Parameter for selecting the offset of data.
     * @param {number} [limit] Parameter for selecting the amount of data in a returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public getAWSTagData(filter?: object, keyOnly?: boolean, offset?: number, limit?: number, options?: any) {
        return TagsApiFp(this.configuration).getAWSTagData(filter, keyOnly, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Query to obtain AWS tags
     * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
     * @param {boolean} [keyOnly] Flag to indicate whether or not only the tag key values will be returned.
     * @param {number} [offset] Parameter for selecting the offset of data.
     * @param {number} [limit] Parameter for selecting the amount of data in a returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public getAzureTagData(filter?: object, keyOnly?: boolean, offset?: number, limit?: number, options?: any) {
        return TagsApiFp(this.configuration).getAzureTagData(filter, keyOnly, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Query to obtain OpenShift-on-AWS tags
     * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
     * @param {boolean} [keyOnly] Flag to indicate whether or not only the tag key values will be returned.
     * @param {number} [offset] Parameter for selecting the offset of data.
     * @param {number} [limit] Parameter for selecting the amount of data in a returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public getOpenShiftAWSTagData(filter?: object, keyOnly?: boolean, offset?: number, limit?: number, options?: any) {
        return TagsApiFp(this.configuration).getOpenShiftAWSTagData(filter, keyOnly, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Query to obtain OpenShift-on-All tags
     * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
     * @param {boolean} [keyOnly] Flag to indicate whether or not only the tag key values will be returned.
     * @param {number} [offset] Parameter for selecting the offset of data.
     * @param {number} [limit] Parameter for selecting the amount of data in a returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public getOpenShiftAllTagData(filter?: object, keyOnly?: boolean, offset?: number, limit?: number, options?: any) {
        return TagsApiFp(this.configuration).getOpenShiftAllTagData(filter, keyOnly, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Query to obtain OpenShift-on-Azure tags
     * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
     * @param {boolean} [keyOnly] Flag to indicate whether or not only the tag key values will be returned.
     * @param {number} [offset] Parameter for selecting the offset of data.
     * @param {number} [limit] Parameter for selecting the amount of data in a returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public getOpenShiftAzureTagData(filter?: object, keyOnly?: boolean, offset?: number, limit?: number, options?: any) {
        return TagsApiFp(this.configuration).getOpenShiftAzureTagData(filter, keyOnly, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Query to obtain OpenShift tags
     * @param {object} [filter] The filter to apply to the report as a URL encoded dictionary.
     * @param {boolean} [keyOnly] Flag to indicate whether or not only the tag key values will be returned.
     * @param {number} [offset] Parameter for selecting the offset of data.
     * @param {number} [limit] Parameter for selecting the amount of data in a returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public getOpenShiftTagData(filter?: object, keyOnly?: boolean, offset?: number, limit?: number, options?: any) {
        return TagsApiFp(this.configuration).getOpenShiftTagData(filter, keyOnly, offset, limit, options)(this.axios, this.basePath);
    }

}


