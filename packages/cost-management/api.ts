// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Cost Management Admin
 * The Admin 'Masu' API for Cost Management.  You can find out more about     Cost Management at [https://github.com/project-koku/](https://github.com/project-koku/).
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';

const BASE_PATH = "http://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 *
 * @export
 * @interface DatabaseConnection
 */
export interface DatabaseConnection {
    /**
     *
     * @type {string}
     * @memberof DatabaseConnection
     */
    database?: string;
    /**
     *
     * @type {string}
     * @memberof DatabaseConnection
     */
    databaseConnections?: string;
}

/**
 *
 * @export
 * @interface DownloadGetResponse
 */
export interface DownloadGetResponse {
    /**
     *
     * @type {string}
     * @memberof DownloadGetResponse
     */
    downloadRequestTaskID?: string;
}

/**
 *
 * @export
 * @interface ExpiredDataDeleteResponse
 */
export interface ExpiredDataDeleteResponse {
    /**
     *
     * @type {string}
     * @memberof ExpiredDataDeleteResponse
     */
    downloadRequestTaskID?: string;
}

/**
 *
 * @export
 * @interface ExpiredDataGetResponse
 */
export interface ExpiredDataGetResponse {
    /**
     *
     * @type {string}
     * @memberof ExpiredDataGetResponse
     */
    asyncJobsForExpiredDataRemovalSimulated?: string;
}

/**
 *
 * @export
 * @interface ReportDataGetResponse
 */
export interface ReportDataGetResponse {
    /**
     *
     * @type {string}
     * @memberof ReportDataGetResponse
     */
    reportDataTaskID?: string;
}

/**
 *
 * @export
 * @interface StatusResponse
 */
export interface StatusResponse {
    /**
     *
     * @type {number}
     * @memberof StatusResponse
     */
    apiVersion?: number;
    /**
     *
     * @type {any}
     * @memberof StatusResponse
     */
    celeryStatus?: any;
    /**
     *
     * @type {string}
     * @memberof StatusResponse
     */
    commit?: string;
    /**
     *
     * @type {string}
     * @memberof StatusResponse
     */
    currentDatetime?: string;
    /**
     *
     * @type {Array<DatabaseConnection>}
     * @memberof StatusResponse
     */
    databaseStatus?: Array<DatabaseConnection>;
    /**
     *
     * @type {boolean}
     * @memberof StatusResponse
     */
    debug?: boolean;
    /**
     *
     * @type {any}
     * @memberof StatusResponse
     */
    platformInfo?: any;
    /**
     *
     * @type {string}
     * @memberof StatusResponse
     */
    pythonVersion?: string;
    /**
     *
     * @type {any}
     * @memberof StatusResponse
     */
    modules?: any;
}

/**
 *
 * @export
 * @interface UpdateChargeGetResponse
 */
export interface UpdateChargeGetResponse {
    /**
     *
     * @type {string}
     * @memberof UpdateChargeGetResponse
     */
    updateChargeTaskID?: string;
}


/**
 * DownloadApi - axios parameter creator
 * @export
 */
export const DownloadApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return download file async task ID.
         * @summary Download reports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDownload(options: any = {}): RequestArgs {
            const localVarPath = `/download/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DownloadApi - functional programming interface
 * @export
 */
export const DownloadApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Return download file async task ID.
         * @summary Download reports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDownload(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DownloadGetResponse> {
            const localVarAxiosArgs = DownloadApiAxiosParamCreator(configuration).getDownload(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DownloadApi - factory interface
 * @export
 */
export const DownloadApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Return download file async task ID.
         * @summary Download reports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDownload(options?: any) {
            return DownloadApiFp(configuration).getDownload(options)(axios, basePath);
        },
    };
};

/**
 * DownloadApi - object-oriented interface
 * @export
 * @class DownloadApi
 * @extends {BaseAPI}
 */
export class DownloadApi extends BaseAPI {
    /**
     * Return download file async task ID.
     * @summary Download reports
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadApi
     */
    public getDownload(options?: any) {
        return DownloadApiFp(this.configuration).getDownload(options)(this.axios, this.basePath);
    }

}

/**
 * ExpiredDataApi - axios parameter creator
 * @export
 */
export const ExpiredDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return expired data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExpiredData(options: any = {}): RequestArgs {
            const localVarPath = `/expired_data/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return simulated expired data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExpiredData(options: any = {}): RequestArgs {
            const localVarPath = `/expired_data/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExpiredDataApi - functional programming interface
 * @export
 */
export const ExpiredDataApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Return expired data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExpiredData(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpiredDataDeleteResponse> {
            const localVarAxiosArgs = ExpiredDataApiAxiosParamCreator(configuration).deleteExpiredData(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Return simulated expired data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExpiredData(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpiredDataGetResponse> {
            const localVarAxiosArgs = ExpiredDataApiAxiosParamCreator(configuration).getExpiredData(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ExpiredDataApi - factory interface
 * @export
 */
export const ExpiredDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Return expired data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExpiredData(options?: any) {
            return ExpiredDataApiFp(configuration).deleteExpiredData(options)(axios, basePath);
        },
        /**
         * Return simulated expired data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExpiredData(options?: any) {
            return ExpiredDataApiFp(configuration).getExpiredData(options)(axios, basePath);
        },
    };
};

/**
 * ExpiredDataApi - object-oriented interface
 * @export
 * @class ExpiredDataApi
 * @extends {BaseAPI}
 */
export class ExpiredDataApi extends BaseAPI {
    /**
     * Return expired data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpiredDataApi
     */
    public deleteExpiredData(options?: any) {
        return ExpiredDataApiFp(this.configuration).deleteExpiredData(options)(this.axios, this.basePath);
    }

    /**
     * Return simulated expired data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpiredDataApi
     */
    public getExpiredData(options?: any) {
        return ExpiredDataApiFp(this.configuration).getExpiredData(options)(this.axios, this.basePath);
    }

}

/**
 * ReportDataApi - axios parameter creator
 * @export
 */
export const ReportDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete report summary tables in the database.
         * @param {string} providerId The provider database ID
         * @param {string} provider The provider type
         * @param {string} schema The database schema
         * @param {boolean} [simulate] Whether to actually delete
         * @param {string} [endDate] The date to end summarizing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReportData(providerId: string, provider: string, schema: string, simulate?: boolean, endDate?: string, options: any = {}): RequestArgs {
            // verify required parameter 'providerId' is not null or undefined
            if (providerId === null || providerId === undefined) {
                throw new RequiredError('providerId','Required parameter providerId was null or undefined when calling deleteReportData.');
            }
            // verify required parameter 'provider' is not null or undefined
            if (provider === null || provider === undefined) {
                throw new RequiredError('provider','Required parameter provider was null or undefined when calling deleteReportData.');
            }
            // verify required parameter 'schema' is not null or undefined
            if (schema === null || schema === undefined) {
                throw new RequiredError('schema','Required parameter schema was null or undefined when calling deleteReportData.');
            }
            const localVarPath = `/report_data/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (providerId !== undefined) {
                localVarQueryParameter['provider_id'] = providerId;
            }

            if (provider !== undefined) {
                localVarQueryParameter['provider'] = provider;
            }

            if (schema !== undefined) {
                localVarQueryParameter['schema'] = schema;
            }

            if (simulate !== undefined) {
                localVarQueryParameter['simulate'] = simulate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update report summary tables in the database.
         * @param {string} [providerUuid] The provider UUID
         * @param {string} [providerType] The provider type
         * @param {string} [schema] The database schema
         * @param {string} [startDate] The date to begin summarizing
         * @param {string} [endDate] The date to end summarizing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportData(providerUuid?: string, providerType?: string, schema?: string, startDate?: string, endDate?: string, options: any = {}): RequestArgs {
            const localVarPath = `/report_data/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (providerUuid !== undefined) {
                localVarQueryParameter['provider_uuid'] = providerUuid;
            }

            if (providerType !== undefined) {
                localVarQueryParameter['provider_type'] = providerType;
            }

            if (schema !== undefined) {
                localVarQueryParameter['schema'] = schema;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportDataApi - functional programming interface
 * @export
 */
export const ReportDataApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete report summary tables in the database.
         * @param {string} providerId The provider database ID
         * @param {string} provider The provider type
         * @param {string} schema The database schema
         * @param {boolean} [simulate] Whether to actually delete
         * @param {string} [endDate] The date to end summarizing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReportData(providerId: string, provider: string, schema: string, simulate?: boolean, endDate?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportDataGetResponse> {
            const localVarAxiosArgs = ReportDataApiAxiosParamCreator(configuration).deleteReportData(providerId, provider, schema, simulate, endDate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update report summary tables in the database.
         * @param {string} [providerUuid] The provider UUID
         * @param {string} [providerType] The provider type
         * @param {string} [schema] The database schema
         * @param {string} [startDate] The date to begin summarizing
         * @param {string} [endDate] The date to end summarizing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportData(providerUuid?: string, providerType?: string, schema?: string, startDate?: string, endDate?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportDataGetResponse> {
            const localVarAxiosArgs = ReportDataApiAxiosParamCreator(configuration).getReportData(providerUuid, providerType, schema, startDate, endDate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ReportDataApi - factory interface
 * @export
 */
export const ReportDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Delete report summary tables in the database.
         * @param {string} providerId The provider database ID
         * @param {string} provider The provider type
         * @param {string} schema The database schema
         * @param {boolean} [simulate] Whether to actually delete
         * @param {string} [endDate] The date to end summarizing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReportData(providerId: string, provider: string, schema: string, simulate?: boolean, endDate?: string, options?: any) {
            return ReportDataApiFp(configuration).deleteReportData(providerId, provider, schema, simulate, endDate, options)(axios, basePath);
        },
        /**
         * Update report summary tables in the database.
         * @param {string} [providerUuid] The provider UUID
         * @param {string} [providerType] The provider type
         * @param {string} [schema] The database schema
         * @param {string} [startDate] The date to begin summarizing
         * @param {string} [endDate] The date to end summarizing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportData(providerUuid?: string, providerType?: string, schema?: string, startDate?: string, endDate?: string, options?: any) {
            return ReportDataApiFp(configuration).getReportData(providerUuid, providerType, schema, startDate, endDate, options)(axios, basePath);
        },
    };
};

/**
 * ReportDataApi - object-oriented interface
 * @export
 * @class ReportDataApi
 * @extends {BaseAPI}
 */
export class ReportDataApi extends BaseAPI {
    /**
     * Delete report summary tables in the database.
     * @param {string} providerId The provider database ID
     * @param {string} provider The provider type
     * @param {string} schema The database schema
     * @param {boolean} [simulate] Whether to actually delete
     * @param {string} [endDate] The date to end summarizing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportDataApi
     */
    public deleteReportData(providerId: string, provider: string, schema: string, simulate?: boolean, endDate?: string, options?: any) {
        return ReportDataApiFp(this.configuration).deleteReportData(providerId, provider, schema, simulate, endDate, options)(this.axios, this.basePath);
    }

    /**
     * Update report summary tables in the database.
     * @param {string} [providerUuid] The provider UUID
     * @param {string} [providerType] The provider type
     * @param {string} [schema] The database schema
     * @param {string} [startDate] The date to begin summarizing
     * @param {string} [endDate] The date to end summarizing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportDataApi
     */
    public getReportData(providerUuid?: string, providerType?: string, schema?: string, startDate?: string, endDate?: string, options?: any) {
        return ReportDataApiFp(this.configuration).getReportData(providerUuid, providerType, schema, startDate, endDate, options)(this.axios, this.basePath);
    }

}

/**
 * StatusApi - axios parameter creator
 * @export
 */
export const StatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Packages response for class-based view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusList(options: any = {}): RequestArgs {
            const localVarPath = `/status/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatusApi - functional programming interface
 * @export
 */
export const StatusApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Packages response for class-based view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusList(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusResponse> {
            const localVarAxiosArgs = StatusApiAxiosParamCreator(configuration).statusList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * StatusApi - factory interface
 * @export
 */
export const StatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Packages response for class-based view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusList(options?: any) {
            return StatusApiFp(configuration).statusList(options)(axios, basePath);
        },
    };
};

/**
 * StatusApi - object-oriented interface
 * @export
 * @class StatusApi
 * @extends {BaseAPI}
 */
export class StatusApi extends BaseAPI {
    /**
     * Packages response for class-based view.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApi
     */
    public statusList(options?: any) {
        return StatusApiFp(this.configuration).statusList(options)(this.axios, this.basePath);
    }

}

/**
 * UpdateChargeApi - axios parameter creator
 * @export
 */
export const UpdateChargeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Update report summary tables in the database.
         * @param {string} [providerUuid] The provider UUID
         * @param {string} [schema] The database schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChargeList(providerUuid?: string, schema?: string, options: any = {}): RequestArgs {
            const localVarPath = `/update_charge/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (providerUuid !== undefined) {
                localVarQueryParameter['provider_uuid'] = providerUuid;
            }

            if (schema !== undefined) {
                localVarQueryParameter['schema'] = schema;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UpdateChargeApi - functional programming interface
 * @export
 */
export const UpdateChargeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Update report summary tables in the database.
         * @param {string} [providerUuid] The provider UUID
         * @param {string} [schema] The database schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChargeList(providerUuid?: string, schema?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateChargeGetResponse> {
            const localVarAxiosArgs = UpdateChargeApiAxiosParamCreator(configuration).updateChargeList(providerUuid, schema, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UpdateChargeApi - factory interface
 * @export
 */
export const UpdateChargeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Update report summary tables in the database.
         * @param {string} [providerUuid] The provider UUID
         * @param {string} [schema] The database schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChargeList(providerUuid?: string, schema?: string, options?: any) {
            return UpdateChargeApiFp(configuration).updateChargeList(providerUuid, schema, options)(axios, basePath);
        },
    };
};

/**
 * UpdateChargeApi - object-oriented interface
 * @export
 * @class UpdateChargeApi
 * @extends {BaseAPI}
 */
export class UpdateChargeApi extends BaseAPI {
    /**
     * Update report summary tables in the database.
     * @param {string} [providerUuid] The provider UUID
     * @param {string} [schema] The database schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpdateChargeApi
     */
    public updateChargeList(providerUuid?: string, schema?: string, options?: any) {
        return UpdateChargeApiFp(this.configuration).updateChargeList(providerUuid, schema, options)(this.axios, this.basePath);
    }

}

