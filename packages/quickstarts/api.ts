/* tslint:disable */
/* eslint-disable */
/**
 * quickstarts
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface BadRequest
 */
export interface BadRequest {
    /**
     *
     * @type {string}
     * @memberof BadRequest
     */
    'msg'?: string;
}
/**
 *
 * @export
 * @interface HelptopicsGet200Response
 */
export interface HelptopicsGet200Response {
    /**
     *
     * @type {Array<V1HelpTopic>}
     * @memberof HelptopicsGet200Response
     */
    'data'?: Array<V1HelpTopic>;
}
/**
 *
 * @export
 * @interface HelptopicsNameGet200Response
 */
export interface HelptopicsNameGet200Response {
    /**
     *
     * @type {V1HelpTopic}
     * @memberof HelptopicsNameGet200Response
     */
    'data'?: V1HelpTopic;
}
/**
 *
 * @export
 * @interface NotFound
 */
export interface NotFound {
    /**
     *
     * @type {string}
     * @memberof NotFound
     */
    'msg'?: string;
}
/**
 *
 * @export
 * @interface QuickstartsGet200Response
 */
export interface QuickstartsGet200Response {
    /**
     *
     * @type {Array<V1Quickstart>}
     * @memberof QuickstartsGet200Response
     */
    'data'?: Array<V1Quickstart>;
}
/**
 *
 * @export
 * @interface V1HelpTopic
 */
export interface V1HelpTopic {
    /**
     *
     * @type {object}
     * @memberof V1HelpTopic
     */
    'content'?: object;
    /**
     *
     * @type {string}
     * @memberof V1HelpTopic
     */
    'createdAt'?: string;
    /**
     *
     * @type {string}
     * @memberof V1HelpTopic
     */
    'deletedAt'?: string | null;
    /**
     *
     * @type {string}
     * @memberof V1HelpTopic
     */
    'groupName'?: string;
    /**
     *
     * @type {number}
     * @memberof V1HelpTopic
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof V1HelpTopic
     */
    'name'?: string;
    /**
     *
     * @type {Array<V1HelpTopicTagsInner>}
     * @memberof V1HelpTopic
     */
    'tags'?: Array<V1HelpTopicTagsInner>;
    /**
     *
     * @type {string}
     * @memberof V1HelpTopic
     */
    'updatedAt'?: string;
}
/**
 *
 * @export
 * @interface V1HelpTopicTagsInner
 */
export interface V1HelpTopicTagsInner {
    /**
     *
     * @type {string}
     * @memberof V1HelpTopicTagsInner
     */
    'createdAt'?: string;
    /**
     *
     * @type {string}
     * @memberof V1HelpTopicTagsInner
     */
    'deletedAt'?: string | null;
    /**
     *
     * @type {number}
     * @memberof V1HelpTopicTagsInner
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof V1HelpTopicTagsInner
     */
    'type'?: string;
    /**
     *
     * @type {string}
     * @memberof V1HelpTopicTagsInner
     */
    'updatedAt'?: string;
    /**
     *
     * @type {string}
     * @memberof V1HelpTopicTagsInner
     */
    'value'?: string;
}
/**
 *
 * @export
 * @interface V1Quickstart
 */
export interface V1Quickstart {
    /**
     *
     * @type {object}
     * @memberof V1Quickstart
     */
    'content'?: object;
    /**
     *
     * @type {string}
     * @memberof V1Quickstart
     */
    'createdAt'?: string;
    /**
     *
     * @type {string}
     * @memberof V1Quickstart
     */
    'deletedAt'?: string | null;
    /**
     *
     * @type {number}
     * @memberof V1Quickstart
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof V1Quickstart
     */
    'name'?: string;
    /**
     *
     * @type {Array<V1HelpTopicTagsInner>}
     * @memberof V1Quickstart
     */
    'tags'?: Array<V1HelpTopicTagsInner>;
    /**
     *
     * @type {string}
     * @memberof V1Quickstart
     */
    'updatedAt'?: string;
}
/**
 *
 * @export
 * @interface V1QuickstartProgress
 */
export interface V1QuickstartProgress {
    /**
     *
     * @type {number}
     * @memberof V1QuickstartProgress
     */
    'accountId'?: number;
    /**
     *
     * @type {string}
     * @memberof V1QuickstartProgress
     */
    'progress'?: string;
    /**
     *
     * @type {string}
     * @memberof V1QuickstartProgress
     */
    'quickstartName'?: string;
}

/**
 * HelptopicApi - axios parameter creator
 * @export
 */
export const HelptopicApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Returns list of all help topics
         * @param {string} [bundle] If set, content is associated with a specific CRC bundle
         * @param {string} [application] If set, content is associated with a specific CRC application
         * @param {string} [name] Search content by name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        helptopicsGet: async (bundle?: string, application?: string, name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/helptopics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bundle !== undefined) {
                localVarQueryParameter['bundle'] = bundle;
            }

            if (application !== undefined) {
                localVarQueryParameter['application'] = application;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Return a help topics set by topic name
         * @param {string} name identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        helptopicsNameGet: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('helptopicsNameGet', 'name', name)
            const localVarPath = `/helptopics/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HelptopicApi - functional programming interface
 * @export
 */
export const HelptopicApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HelptopicApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Returns list of all help topics
         * @param {string} [bundle] If set, content is associated with a specific CRC bundle
         * @param {string} [application] If set, content is associated with a specific CRC application
         * @param {string} [name] Search content by name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async helptopicsGet(bundle?: string, application?: string, name?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HelptopicsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.helptopicsGet(bundle, application, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Return a help topics set by topic name
         * @param {string} name identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async helptopicsNameGet(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HelptopicsNameGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.helptopicsNameGet(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HelptopicApi - factory interface
 * @export
 */
export const HelptopicApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HelptopicApiFp(configuration)
    return {
        /**
         *
         * @summary Returns list of all help topics
         * @param {string} [bundle] If set, content is associated with a specific CRC bundle
         * @param {string} [application] If set, content is associated with a specific CRC application
         * @param {string} [name] Search content by name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        helptopicsGet(bundle?: string, application?: string, name?: string, options?: any): AxiosPromise<HelptopicsGet200Response> {
            return localVarFp.helptopicsGet(bundle, application, name, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Return a help topics set by topic name
         * @param {string} name identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        helptopicsNameGet(name: string, options?: any): AxiosPromise<HelptopicsNameGet200Response> {
            return localVarFp.helptopicsNameGet(name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HelptopicApi - object-oriented interface
 * @export
 * @class HelptopicApi
 * @extends {BaseAPI}
 */
export class HelptopicApi extends BaseAPI {
    /**
     *
     * @summary Returns list of all help topics
     * @param {string} [bundle] If set, content is associated with a specific CRC bundle
     * @param {string} [application] If set, content is associated with a specific CRC application
     * @param {string} [name] Search content by name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelptopicApi
     */
    public helptopicsGet(bundle?: string, application?: string, name?: string, options?: AxiosRequestConfig) {
        return HelptopicApiFp(this.configuration).helptopicsGet(bundle, application, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Return a help topics set by topic name
     * @param {string} name identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelptopicApi
     */
    public helptopicsNameGet(name: string, options?: AxiosRequestConfig) {
        return HelptopicApiFp(this.configuration).helptopicsNameGet(name, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * QuickstartApi - axios parameter creator
 * @export
 */
export const QuickstartApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Returns list of all quickstarts
         * @param {string} [bundle] If set, content is associated with a specific CRC bundle
         * @param {string} [application] If set, content is associated with a specific CRC application
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quickstartsGet: async (bundle?: string, application?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/quickstarts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bundle !== undefined) {
                localVarQueryParameter['bundle'] = bundle;
            }

            if (application !== undefined) {
                localVarQueryParameter['application'] = application;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Return a quickstarts by ID
         * @param {number} id identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quickstartsIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('quickstartsIdGet', 'id', id)
            const localVarPath = `/quickstarts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuickstartApi - functional programming interface
 * @export
 */
export const QuickstartApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuickstartApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Returns list of all quickstarts
         * @param {string} [bundle] If set, content is associated with a specific CRC bundle
         * @param {string} [application] If set, content is associated with a specific CRC application
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quickstartsGet(bundle?: string, application?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuickstartsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quickstartsGet(bundle, application, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Return a quickstarts by ID
         * @param {number} id identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quickstartsIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Quickstart>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quickstartsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QuickstartApi - factory interface
 * @export
 */
export const QuickstartApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuickstartApiFp(configuration)
    return {
        /**
         *
         * @summary Returns list of all quickstarts
         * @param {string} [bundle] If set, content is associated with a specific CRC bundle
         * @param {string} [application] If set, content is associated with a specific CRC application
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quickstartsGet(bundle?: string, application?: string, limit?: number, offset?: number, options?: any): AxiosPromise<QuickstartsGet200Response> {
            return localVarFp.quickstartsGet(bundle, application, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Return a quickstarts by ID
         * @param {number} id identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quickstartsIdGet(id: number, options?: any): AxiosPromise<V1Quickstart> {
            return localVarFp.quickstartsIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuickstartApi - object-oriented interface
 * @export
 * @class QuickstartApi
 * @extends {BaseAPI}
 */
export class QuickstartApi extends BaseAPI {
    /**
     *
     * @summary Returns list of all quickstarts
     * @param {string} [bundle] If set, content is associated with a specific CRC bundle
     * @param {string} [application] If set, content is associated with a specific CRC application
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuickstartApi
     */
    public quickstartsGet(bundle?: string, application?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return QuickstartApiFp(this.configuration).quickstartsGet(bundle, application, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Return a quickstarts by ID
     * @param {number} id identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuickstartApi
     */
    public quickstartsIdGet(id: number, options?: AxiosRequestConfig) {
        return QuickstartApiFp(this.configuration).quickstartsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}


