// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';

const BASE_PATH = "http://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * Application object properties
 * @export
 * @interface App
 */
export interface App {
    /**
     * Identifier of the application
     * @type {string}
     * @memberof App
     */
    id?: string;
    /**
     * Type of the returned record
     * @type {string}
     * @memberof App
     */
    type?: App.TypeEnum;
    /**
     *
     * @type {AppAttributes}
     * @memberof App
     */
    attributes?: AppAttributes;
    /**
     *
     * @type {AppRelationships}
     * @memberof App
     */
    relationships?: AppRelationships;
}

/**
 * @export
 * @namespace App
 */
export namespace App {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        App = 'app'
    }
}

/**
 *
 * @export
 * @interface AppAttributes
 */
export interface AppAttributes {
    /**
     * Name of the application, used to identify the sender in messages
     * @type {string}
     * @memberof AppAttributes
     */
    name?: string;
    /**
     * Title of the application, shown to the user when configuring filters
     * @type {string}
     * @memberof AppAttributes
     */
    title?: string;
}

/**
 *
 * @export
 * @interface AppRelationships
 */
export interface AppRelationships {
    /**
     *
     * @type {Relationships}
     * @memberof AppRelationships
     */
    eventTypes?: Relationships;
}

/**
 *
 * @export
 * @interface AppsRegisterApplication
 */
export interface AppsRegisterApplication {
    /**
     *
     * @type {string}
     * @memberof AppsRegisterApplication
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof AppsRegisterApplication
     */
    title?: string;
}

/**
 *
 * @export
 * @interface AppsRegisterEventTypes
 */
export interface AppsRegisterEventTypes {
    /**
     *
     * @type {Object}
     * @memberof AppsRegisterEventTypes
     */
    id?: Object;
    /**
     *
     * @type {string}
     * @memberof AppsRegisterEventTypes
     */
    title?: string;
    /**
     *
     * @type {AppsRegisterEventTypesLevels}
     * @memberof AppsRegisterEventTypes
     */
    levels?: AppsRegisterEventTypesLevels;
}

/**
 *
 * @export
 * @interface AppsRegisterEventTypesLevels
 */
export interface AppsRegisterEventTypesLevels {
    /**
     *
     * @type {Object}
     * @memberof AppsRegisterEventTypesLevels
     */
    id?: Object;
    /**
     *
     * @type {string}
     * @memberof AppsRegisterEventTypesLevels
     */
    title?: string;
}

/**
 *
 * @export
 * @interface Endpoint
 */
export interface Endpoint {
    /**
     * Identifier of the endpoint
     * @type {string}
     * @memberof Endpoint
     */
    id?: string;
    /**
     * Type of the returned record
     * @type {string}
     * @memberof Endpoint
     */
    type?: Endpoint.TypeEnum;
    /**
     *
     * @type {EndpointAttributes}
     * @memberof Endpoint
     */
    attributes?: EndpointAttributes;
}

/**
 * @export
 * @namespace Endpoint
 */
export namespace Endpoint {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Endpoint = 'endpoint'
    }
}

/**
 *
 * @export
 * @interface EndpointAttributes
 */
export interface EndpointAttributes {
    /**
     * Human readable description of the endpoint
     * @type {string}
     * @memberof EndpointAttributes
     */
    name?: string;
    /**
     * A flag determining whether this endpoint should be used
     * @type {boolean}
     * @memberof EndpointAttributes
     */
    active?: boolean;
    /**
     * URL to which messages should be POSTed
     * @type {string}
     * @memberof EndpointAttributes
     */
    url?: string;
    /**
     * Status of the last delivery
     * @type {string}
     * @memberof EndpointAttributes
     */
    lastDeliveryStatus?: EndpointAttributes.LastDeliveryStatusEnum;
    /**
     * Timestamp of last delivery attempt
     * @type {Date}
     * @memberof EndpointAttributes
     */
    lastDeliveryTime?: Date | null;
    /**
     * Timestamp of first failure. If the status is \"failure\", this marks when the endpoint \"went down\"
     * @type {Date}
     * @memberof EndpointAttributes
     */
    lastFailureTime?: Date;
}

/**
 * @export
 * @namespace EndpointAttributes
 */
export namespace EndpointAttributes {
    /**
     * @export
     * @enum {string}
     */
    export enum LastDeliveryStatusEnum {
        Success = 'success',
        Failure = 'failure'
    }
}

/**
 *
 * @export
 * @interface EndpointsEndpoint
 */
export interface EndpointsEndpoint {
    /**
     *
     * @type {string}
     * @memberof EndpointsEndpoint
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof EndpointsEndpoint
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof EndpointsEndpoint
     */
    type?: string;
    /**
     *
     * @type {EndpointsEndpointFilter}
     * @memberof EndpointsEndpoint
     */
    filter?: EndpointsEndpointFilter;
}

/**
 *
 * @export
 * @interface EndpointsEndpointFilter
 */
export interface EndpointsEndpointFilter {
    /**
     *
     * @type {Array<string>}
     * @memberof EndpointsEndpointFilter
     */
    appIds?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof EndpointsEndpointFilter
     */
    eventTypeIds?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof EndpointsEndpointFilter
     */
    levelIds?: Array<string>;
}

/**
 *
 * @export
 * @interface EndpointsIdEndpoint
 */
export interface EndpointsIdEndpoint {
    /**
     *
     * @type {string}
     * @memberof EndpointsIdEndpoint
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof EndpointsIdEndpoint
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof EndpointsIdEndpoint
     */
    type?: string;
    /**
     *
     * @type {EndpointsIdEndpointFilter}
     * @memberof EndpointsIdEndpoint
     */
    filter?: EndpointsIdEndpointFilter;
}

/**
 *
 * @export
 * @interface EndpointsIdEndpointFilter
 */
export interface EndpointsIdEndpointFilter {
    /**
     *
     * @type {Array<string>}
     * @memberof EndpointsIdEndpointFilter
     */
    appIds?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof EndpointsIdEndpointFilter
     */
    eventTypeIds?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof EndpointsIdEndpointFilter
     */
    levelIds?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof EndpointsIdEndpointFilter
     */
    destroy?: boolean;
}

/**
 *
 * @export
 * @interface Errors
 */
export interface Errors {
    /**
     *
     * @type {Array<ErrorsErrors>}
     * @memberof Errors
     */
    errors?: Array<ErrorsErrors>;
}

/**
 *
 * @export
 * @interface ErrorsErrors
 */
export interface ErrorsErrors {
    /**
     *
     * @type {string}
     * @memberof ErrorsErrors
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ErrorsErrors
     */
    status?: string;
    /**
     *
     * @type {string}
     * @memberof ErrorsErrors
     */
    code?: string;
    /**
     *
     * @type {string}
     * @memberof ErrorsErrors
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof ErrorsErrors
     */
    detail?: string;
    /**
     *
     * @type {ErrorsSource}
     * @memberof ErrorsErrors
     */
    source?: ErrorsSource;
    /**
     *
     * @type {any}
     * @memberof ErrorsErrors
     */
    meta?: any;
}

/**
 *
 * @export
 * @interface ErrorsSource
 */
export interface ErrorsSource {
    /**
     *
     * @type {string}
     * @memberof ErrorsSource
     */
    pointer?: string;
    /**
     *
     * @type {string}
     * @memberof ErrorsSource
     */
    parameter?: string;
}

/**
 * Event type record properties
 * @export
 * @interface EventType
 */
export interface EventType {
    /**
     * Identifier of the event type
     * @type {string}
     * @memberof EventType
     */
    id?: string;
    /**
     * Type of the returned record
     * @type {string}
     * @memberof EventType
     */
    type?: EventType.TypeEnum;
    /**
     *
     * @type {EventTypeAttributes}
     * @memberof EventType
     */
    attributes?: EventTypeAttributes;
    /**
     *
     * @type {EventTypeRelationships}
     * @memberof EventType
     */
    relationships?: EventTypeRelationships;
}

/**
 * @export
 * @namespace EventType
 */
export namespace EventType {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        EventType = 'event_type'
    }
}

/**
 *
 * @export
 * @interface EventTypeAttributes
 */
export interface EventTypeAttributes {
    /**
     * Identifier of the event type, used to identify the event type in messages
     * @type {string}
     * @memberof EventTypeAttributes
     */
    name?: string;
    /**
     * Human readable description of the event type, shown to the user when configuring filters
     * @type {string}
     * @memberof EventTypeAttributes
     */
    title?: string;
}

/**
 *
 * @export
 * @interface EventTypeRelationships
 */
export interface EventTypeRelationships {
    /**
     *
     * @type {Relationships}
     * @memberof EventTypeRelationships
     */
    levels?: Relationships;
}

/**
 *
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     *
     * @type {AppsRegisterApplication}
     * @memberof InlineObject
     */
    application?: AppsRegisterApplication;
    /**
     *
     * @type {AppsRegisterEventTypes}
     * @memberof InlineObject
     */
    eventTypes?: AppsRegisterEventTypes;
}

/**
 *
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     *
     * @type {EndpointsEndpoint}
     * @memberof InlineObject1
     */
    endpoint?: EndpointsEndpoint;
}

/**
 *
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     *
     * @type {EndpointsIdEndpoint}
     * @memberof InlineObject2
     */
    endpoint?: EndpointsIdEndpoint;
}

/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     *
     * @type {Array<App>}
     * @memberof InlineResponse200
     */
    data?: Array<App>;
    /**
     *
     * @type {Array<Object>}
     * @memberof InlineResponse200
     */
    included?: Array<Object>;
}

/**
 *
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     *
     * @type {App}
     * @memberof InlineResponse2001
     */
    data?: App;
}

/**
 *
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     *
     * @type {App}
     * @memberof InlineResponse2002
     */
    data?: App;
    /**
     *
     * @type {Array<Object>}
     * @memberof InlineResponse2002
     */
    included?: Array<Object>;
}

/**
 *
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     *
     * @type {Array<Endpoint>}
     * @memberof InlineResponse2003
     */
    data?: Array<Endpoint>;
    /**
     *
     * @type {Metadata}
     * @memberof InlineResponse2003
     */
    meta?: Metadata;
    /**
     *
     * @type {Links}
     * @memberof InlineResponse2003
     */
    links?: Links;
}

/**
 *
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     *
     * @type {InlineResponse2004Data}
     * @memberof InlineResponse2004
     */
    data?: InlineResponse2004Data;
}

/**
 *
 * @export
 * @interface InlineResponse2004Data
 */
export interface InlineResponse2004Data {
    /**
     *
     * @type {string}
     * @memberof InlineResponse2004Data
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2004Data
     */
    type?: InlineResponse2004Data.TypeEnum;
    /**
     *
     * @type {InlineResponse2004DataAttributes}
     * @memberof InlineResponse2004Data
     */
    attributes?: InlineResponse2004DataAttributes;
    /**
     *
     * @type {InlineResponse2004DataRelationships}
     * @memberof InlineResponse2004Data
     */
    relationships?: InlineResponse2004DataRelationships;
}

/**
 * @export
 * @namespace InlineResponse2004Data
 */
export namespace InlineResponse2004Data {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Filter = 'filter'
    }
}

/**
 *
 * @export
 * @interface InlineResponse2004DataAttributes
 */
export interface InlineResponse2004DataAttributes {
    /**
     *
     * @type {boolean}
     * @memberof InlineResponse2004DataAttributes
     */
    enabled?: boolean;
}

/**
 *
 * @export
 * @interface InlineResponse2004DataRelationships
 */
export interface InlineResponse2004DataRelationships {
    /**
     *
     * @type {Relationships}
     * @memberof InlineResponse2004DataRelationships
     */
    apps?: Relationships;
    /**
     *
     * @type {Relationships}
     * @memberof InlineResponse2004DataRelationships
     */
    eventTypes?: Relationships;
    /**
     *
     * @type {Relationships}
     * @memberof InlineResponse2004DataRelationships
     */
    levels?: Relationships;
    /**
     *
     * @type {Relationship}
     * @memberof InlineResponse2004DataRelationships
     */
    endpoint?: Relationship;
}

/**
 *
 * @export
 * @interface InlineResponse201
 */
export interface InlineResponse201 {
    /**
     *
     * @type {Endpoint}
     * @memberof InlineResponse201
     */
    data?: Endpoint;
}

/**
 * Level record properties
 * @export
 * @interface Level
 */
export interface Level {
    /**
     * Identifier of the level record
     * @type {string}
     * @memberof Level
     */
    id?: string;
    /**
     * Type of the returned record
     * @type {string}
     * @memberof Level
     */
    type?: Level.TypeEnum;
    /**
     *
     * @type {LevelAttributes}
     * @memberof Level
     */
    attributes?: LevelAttributes;
}

/**
 * @export
 * @namespace Level
 */
export namespace Level {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Level = 'level'
    }
}

/**
 *
 * @export
 * @interface LevelAttributes
 */
export interface LevelAttributes {
    /**
     * Title of the level, shown to the user when configuring filters
     * @type {string}
     * @memberof LevelAttributes
     */
    title?: string;
}

/**
 *
 * @export
 * @interface Links
 */
export interface Links {
    /**
     * Link to the first page of records
     * @type {string}
     * @memberof Links
     */
    first?: string;
    /**
     * Link to the last page of records
     * @type {string}
     * @memberof Links
     */
    last?: string;
    /**
     * Link to previous page of records, if such page exists
     * @type {string}
     * @memberof Links
     */
    previous?: string;
    /**
     * Link to next page of records, if such page exists
     * @type {string}
     * @memberof Links
     */
    next?: string;
}

/**
 *
 * @export
 * @interface Metadata
 */
export interface Metadata {
    /**
     * The total number of available records.
     * @type {number}
     * @memberof Metadata
     */
    total?: number;
    /**
     * The maximum number of records to return.
     * @type {number}
     * @memberof Metadata
     */
    limit?: number;
    /**
     * The number of records to skip before returning.
     * @type {number}
     * @memberof Metadata
     */
    offset?: number;
}

/**
 *
 * @export
 * @interface Relationship
 */
export interface Relationship {
    /**
     *
     * @type {string}
     * @memberof Relationship
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Relationship
     */
    type?: string;
}

/**
 *
 * @export
 * @interface Relationships
 */
export interface Relationships {
    /**
     *
     * @type {Array<Relationship>}
     * @memberof Relationships
     */
    data?: Array<Relationship>;
}


/**
 * AppRegistrationApi - axios parameter creator
 * @export
 */
export const AppRegistrationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Register an application
         * @param {InlineObject} inlineObject
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegistrationCreate(inlineObject: InlineObject, options: any = {}): RequestArgs {
            // verify required parameter 'inlineObject' is not null or undefined
            if (inlineObject === null || inlineObject === undefined) {
                throw new RequiredError('inlineObject','Required parameter inlineObject was null or undefined when calling appRegistrationCreate.');
            }
            const localVarPath = `/apps/register`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"InlineObject" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject || {}) : (inlineObject || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppRegistrationApi - functional programming interface
 * @export
 */
export const AppRegistrationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Register an application
         * @param {InlineObject} inlineObject
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegistrationCreate(inlineObject: InlineObject, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001> {
            const localVarAxiosArgs = AppRegistrationApiAxiosParamCreator(configuration).appRegistrationCreate(inlineObject, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AppRegistrationApi - factory interface
 * @export
 */
export const AppRegistrationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Register an application
         * @param {InlineObject} inlineObject
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegistrationCreate(inlineObject: InlineObject, options?: any) {
            return AppRegistrationApiFp(configuration).appRegistrationCreate(inlineObject, options)(axios, basePath);
        },
    };
};

/**
 * AppRegistrationApi - object-oriented interface
 * @export
 * @class AppRegistrationApi
 * @extends {BaseAPI}
 */
export class AppRegistrationApi extends BaseAPI {
    /**
     * Register an application
     * @param {InlineObject} inlineObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppRegistrationApi
     */
    public appRegistrationCreate(inlineObject: InlineObject, options?: any) {
        return AppRegistrationApiFp(this.configuration).appRegistrationCreate(inlineObject, options)(this.axios, this.basePath);
    }

}

/**
 * AppsApi - axios parameter creator
 * @export
 */
export const AppsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists all apps requested
         * @param {string} X_RH_IDENTITY
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appsIndex(X_RH_IDENTITY: string, options: any = {}): RequestArgs {
            // verify required parameter 'X_RH_IDENTITY' is not null or undefined
            if (X_RH_IDENTITY === null || X_RH_IDENTITY === undefined) {
                throw new RequiredError('X_RH_IDENTITY','Required parameter X_RH_IDENTITY was null or undefined when calling appsIndex.');
            }
            const localVarPath = `/apps`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (X_RH_IDENTITY !== undefined && X_RH_IDENTITY !== null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = String(X_RH_IDENTITY);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Shows the requested app
         * @param {string} X_RH_IDENTITY
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appsShow(X_RH_IDENTITY: string, id: number, options: any = {}): RequestArgs {
            // verify required parameter 'X_RH_IDENTITY' is not null or undefined
            if (X_RH_IDENTITY === null || X_RH_IDENTITY === undefined) {
                throw new RequiredError('X_RH_IDENTITY','Required parameter X_RH_IDENTITY was null or undefined when calling appsShow.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling appsShow.');
            }
            const localVarPath = `/apps/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (X_RH_IDENTITY !== undefined && X_RH_IDENTITY !== null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = String(X_RH_IDENTITY);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppsApi - functional programming interface
 * @export
 */
export const AppsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Lists all apps requested
         * @param {string} X_RH_IDENTITY
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appsIndex(X_RH_IDENTITY: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
            const localVarAxiosArgs = AppsApiAxiosParamCreator(configuration).appsIndex(X_RH_IDENTITY, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Shows the requested app
         * @param {string} X_RH_IDENTITY
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appsShow(X_RH_IDENTITY: string, id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002> {
            const localVarAxiosArgs = AppsApiAxiosParamCreator(configuration).appsShow(X_RH_IDENTITY, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AppsApi - factory interface
 * @export
 */
export const AppsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Lists all apps requested
         * @param {string} X_RH_IDENTITY
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appsIndex(X_RH_IDENTITY: string, options?: any) {
            return AppsApiFp(configuration).appsIndex(X_RH_IDENTITY, options)(axios, basePath);
        },
        /**
         * Shows the requested app
         * @param {string} X_RH_IDENTITY
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appsShow(X_RH_IDENTITY: string, id: number, options?: any) {
            return AppsApiFp(configuration).appsShow(X_RH_IDENTITY, id, options)(axios, basePath);
        },
    };
};

/**
 * AppsApi - object-oriented interface
 * @export
 * @class AppsApi
 * @extends {BaseAPI}
 */
export class AppsApi extends BaseAPI {
    /**
     * Lists all apps requested
     * @param {string} X_RH_IDENTITY
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApi
     */
    public appsIndex(X_RH_IDENTITY: string, options?: any) {
        return AppsApiFp(this.configuration).appsIndex(X_RH_IDENTITY, options)(this.axios, this.basePath);
    }

    /**
     * Shows the requested app
     * @param {string} X_RH_IDENTITY
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApi
     */
    public appsShow(X_RH_IDENTITY: string, id: number, options?: any) {
        return AppsApiFp(this.configuration).appsShow(X_RH_IDENTITY, id, options)(this.axios, this.basePath);
    }

}

/**
 * EndpointsApi - axios parameter creator
 * @export
 */
export const EndpointsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an endpoint
         * @param {string} X_RH_IDENTITY
         * @param {InlineObject1} inlineObject1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsCreate(X_RH_IDENTITY: string, inlineObject1: InlineObject1, options: any = {}): RequestArgs {
            // verify required parameter 'X_RH_IDENTITY' is not null or undefined
            if (X_RH_IDENTITY === null || X_RH_IDENTITY === undefined) {
                throw new RequiredError('X_RH_IDENTITY','Required parameter X_RH_IDENTITY was null or undefined when calling endpointsCreate.');
            }
            // verify required parameter 'inlineObject1' is not null or undefined
            if (inlineObject1 === null || inlineObject1 === undefined) {
                throw new RequiredError('inlineObject1','Required parameter inlineObject1 was null or undefined when calling endpointsCreate.');
            }
            const localVarPath = `/endpoints`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (X_RH_IDENTITY !== undefined && X_RH_IDENTITY !== null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = String(X_RH_IDENTITY);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"InlineObject1" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject1 || {}) : (inlineObject1 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} X_RH_IDENTITY
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsDestroy(X_RH_IDENTITY: string, id: number, options: any = {}): RequestArgs {
            // verify required parameter 'X_RH_IDENTITY' is not null or undefined
            if (X_RH_IDENTITY === null || X_RH_IDENTITY === undefined) {
                throw new RequiredError('X_RH_IDENTITY','Required parameter X_RH_IDENTITY was null or undefined when calling endpointsDestroy.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling endpointsDestroy.');
            }
            const localVarPath = `/endpoints/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (X_RH_IDENTITY !== undefined && X_RH_IDENTITY !== null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = String(X_RH_IDENTITY);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all endpoints
         * @param {string} X_RH_IDENTITY
         * @param {string} [order] The ordering by which the returned collection should be sorted.
         * @param {number} [offset] The number of records to skip before returning.
         * @param {number} [limit] The maximum number of records to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsIndex(X_RH_IDENTITY: string, order?: string, offset?: number, limit?: number, options: any = {}): RequestArgs {
            // verify required parameter 'X_RH_IDENTITY' is not null or undefined
            if (X_RH_IDENTITY === null || X_RH_IDENTITY === undefined) {
                throw new RequiredError('X_RH_IDENTITY','Required parameter X_RH_IDENTITY was null or undefined when calling endpointsIndex.');
            }
            const localVarPath = `/endpoints`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (X_RH_IDENTITY !== undefined && X_RH_IDENTITY !== null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = String(X_RH_IDENTITY);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Shows the requested endpoint
         * @param {string} X_RH_IDENTITY
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsShow(X_RH_IDENTITY: string, id: number, options: any = {}): RequestArgs {
            // verify required parameter 'X_RH_IDENTITY' is not null or undefined
            if (X_RH_IDENTITY === null || X_RH_IDENTITY === undefined) {
                throw new RequiredError('X_RH_IDENTITY','Required parameter X_RH_IDENTITY was null or undefined when calling endpointsShow.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling endpointsShow.');
            }
            const localVarPath = `/endpoints/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (X_RH_IDENTITY !== undefined && X_RH_IDENTITY !== null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = String(X_RH_IDENTITY);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send a test message to the endpoint
         * @param {string} X_RH_IDENTITY
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsTest(X_RH_IDENTITY: string, id: number, options: any = {}): RequestArgs {
            // verify required parameter 'X_RH_IDENTITY' is not null or undefined
            if (X_RH_IDENTITY === null || X_RH_IDENTITY === undefined) {
                throw new RequiredError('X_RH_IDENTITY','Required parameter X_RH_IDENTITY was null or undefined when calling endpointsTest.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling endpointsTest.');
            }
            const localVarPath = `/endpoints/{id}/test`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (X_RH_IDENTITY !== undefined && X_RH_IDENTITY !== null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = String(X_RH_IDENTITY);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the requested endpoint
         * @param {string} X_RH_IDENTITY
         * @param {number} id
         * @param {InlineObject2} inlineObject2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsUpdate(X_RH_IDENTITY: string, id: number, inlineObject2: InlineObject2, options: any = {}): RequestArgs {
            // verify required parameter 'X_RH_IDENTITY' is not null or undefined
            if (X_RH_IDENTITY === null || X_RH_IDENTITY === undefined) {
                throw new RequiredError('X_RH_IDENTITY','Required parameter X_RH_IDENTITY was null or undefined when calling endpointsUpdate.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling endpointsUpdate.');
            }
            // verify required parameter 'inlineObject2' is not null or undefined
            if (inlineObject2 === null || inlineObject2 === undefined) {
                throw new RequiredError('inlineObject2','Required parameter inlineObject2 was null or undefined when calling endpointsUpdate.');
            }
            const localVarPath = `/endpoints/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (X_RH_IDENTITY !== undefined && X_RH_IDENTITY !== null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = String(X_RH_IDENTITY);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"InlineObject2" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject2 || {}) : (inlineObject2 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EndpointsApi - functional programming interface
 * @export
 */
export const EndpointsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates an endpoint
         * @param {string} X_RH_IDENTITY
         * @param {InlineObject1} inlineObject1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsCreate(X_RH_IDENTITY: string, inlineObject1: InlineObject1, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse201> {
            const localVarAxiosArgs = EndpointsApiAxiosParamCreator(configuration).endpointsCreate(X_RH_IDENTITY, inlineObject1, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} X_RH_IDENTITY
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsDestroy(X_RH_IDENTITY: string, id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = EndpointsApiAxiosParamCreator(configuration).endpointsDestroy(X_RH_IDENTITY, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all endpoints
         * @param {string} X_RH_IDENTITY
         * @param {string} [order] The ordering by which the returned collection should be sorted.
         * @param {number} [offset] The number of records to skip before returning.
         * @param {number} [limit] The maximum number of records to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsIndex(X_RH_IDENTITY: string, order?: string, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003> {
            const localVarAxiosArgs = EndpointsApiAxiosParamCreator(configuration).endpointsIndex(X_RH_IDENTITY, order, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Shows the requested endpoint
         * @param {string} X_RH_IDENTITY
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsShow(X_RH_IDENTITY: string, id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse201> {
            const localVarAxiosArgs = EndpointsApiAxiosParamCreator(configuration).endpointsShow(X_RH_IDENTITY, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Send a test message to the endpoint
         * @param {string} X_RH_IDENTITY
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsTest(X_RH_IDENTITY: string, id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = EndpointsApiAxiosParamCreator(configuration).endpointsTest(X_RH_IDENTITY, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates the requested endpoint
         * @param {string} X_RH_IDENTITY
         * @param {number} id
         * @param {InlineObject2} inlineObject2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsUpdate(X_RH_IDENTITY: string, id: number, inlineObject2: InlineObject2, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse201> {
            const localVarAxiosArgs = EndpointsApiAxiosParamCreator(configuration).endpointsUpdate(X_RH_IDENTITY, id, inlineObject2, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EndpointsApi - factory interface
 * @export
 */
export const EndpointsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates an endpoint
         * @param {string} X_RH_IDENTITY
         * @param {InlineObject1} inlineObject1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsCreate(X_RH_IDENTITY: string, inlineObject1: InlineObject1, options?: any) {
            return EndpointsApiFp(configuration).endpointsCreate(X_RH_IDENTITY, inlineObject1, options)(axios, basePath);
        },
        /**
         *
         * @param {string} X_RH_IDENTITY
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsDestroy(X_RH_IDENTITY: string, id: number, options?: any) {
            return EndpointsApiFp(configuration).endpointsDestroy(X_RH_IDENTITY, id, options)(axios, basePath);
        },
        /**
         * List all endpoints
         * @param {string} X_RH_IDENTITY
         * @param {string} [order] The ordering by which the returned collection should be sorted.
         * @param {number} [offset] The number of records to skip before returning.
         * @param {number} [limit] The maximum number of records to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsIndex(X_RH_IDENTITY: string, order?: string, offset?: number, limit?: number, options?: any) {
            return EndpointsApiFp(configuration).endpointsIndex(X_RH_IDENTITY, order, offset, limit, options)(axios, basePath);
        },
        /**
         * Shows the requested endpoint
         * @param {string} X_RH_IDENTITY
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsShow(X_RH_IDENTITY: string, id: number, options?: any) {
            return EndpointsApiFp(configuration).endpointsShow(X_RH_IDENTITY, id, options)(axios, basePath);
        },
        /**
         * Send a test message to the endpoint
         * @param {string} X_RH_IDENTITY
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsTest(X_RH_IDENTITY: string, id: number, options?: any) {
            return EndpointsApiFp(configuration).endpointsTest(X_RH_IDENTITY, id, options)(axios, basePath);
        },
        /**
         * Updates the requested endpoint
         * @param {string} X_RH_IDENTITY
         * @param {number} id
         * @param {InlineObject2} inlineObject2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsUpdate(X_RH_IDENTITY: string, id: number, inlineObject2: InlineObject2, options?: any) {
            return EndpointsApiFp(configuration).endpointsUpdate(X_RH_IDENTITY, id, inlineObject2, options)(axios, basePath);
        },
    };
};

/**
 * EndpointsApi - object-oriented interface
 * @export
 * @class EndpointsApi
 * @extends {BaseAPI}
 */
export class EndpointsApi extends BaseAPI {
    /**
     * Creates an endpoint
     * @param {string} X_RH_IDENTITY
     * @param {InlineObject1} inlineObject1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    public endpointsCreate(X_RH_IDENTITY: string, inlineObject1: InlineObject1, options?: any) {
        return EndpointsApiFp(this.configuration).endpointsCreate(X_RH_IDENTITY, inlineObject1, options)(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} X_RH_IDENTITY
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    public endpointsDestroy(X_RH_IDENTITY: string, id: number, options?: any) {
        return EndpointsApiFp(this.configuration).endpointsDestroy(X_RH_IDENTITY, id, options)(this.axios, this.basePath);
    }

    /**
     * List all endpoints
     * @param {string} X_RH_IDENTITY
     * @param {string} [order] The ordering by which the returned collection should be sorted.
     * @param {number} [offset] The number of records to skip before returning.
     * @param {number} [limit] The maximum number of records to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    public endpointsIndex(X_RH_IDENTITY: string, order?: string, offset?: number, limit?: number, options?: any) {
        return EndpointsApiFp(this.configuration).endpointsIndex(X_RH_IDENTITY, order, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * Shows the requested endpoint
     * @param {string} X_RH_IDENTITY
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    public endpointsShow(X_RH_IDENTITY: string, id: number, options?: any) {
        return EndpointsApiFp(this.configuration).endpointsShow(X_RH_IDENTITY, id, options)(this.axios, this.basePath);
    }

    /**
     * Send a test message to the endpoint
     * @param {string} X_RH_IDENTITY
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    public endpointsTest(X_RH_IDENTITY: string, id: number, options?: any) {
        return EndpointsApiFp(this.configuration).endpointsTest(X_RH_IDENTITY, id, options)(this.axios, this.basePath);
    }

    /**
     * Updates the requested endpoint
     * @param {string} X_RH_IDENTITY
     * @param {number} id
     * @param {InlineObject2} inlineObject2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    public endpointsUpdate(X_RH_IDENTITY: string, id: number, inlineObject2: InlineObject2, options?: any) {
        return EndpointsApiFp(this.configuration).endpointsUpdate(X_RH_IDENTITY, id, inlineObject2, options)(this.axios, this.basePath);
    }

}

/**
 * FiltersApi - axios parameter creator
 * @export
 */
export const FiltersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Show the filter of the endpoint
         * @param {string} X_RH_IDENTITY
         * @param {number} endpointId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filtersShow(X_RH_IDENTITY: string, endpointId: number, options: any = {}): RequestArgs {
            // verify required parameter 'X_RH_IDENTITY' is not null or undefined
            if (X_RH_IDENTITY === null || X_RH_IDENTITY === undefined) {
                throw new RequiredError('X_RH_IDENTITY','Required parameter X_RH_IDENTITY was null or undefined when calling filtersShow.');
            }
            // verify required parameter 'endpointId' is not null or undefined
            if (endpointId === null || endpointId === undefined) {
                throw new RequiredError('endpointId','Required parameter endpointId was null or undefined when calling filtersShow.');
            }
            const localVarPath = `/endpoints/{endpoint_id}/filter`
                .replace(`{${"endpoint_id"}}`, encodeURIComponent(String(endpointId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (X_RH_IDENTITY !== undefined && X_RH_IDENTITY !== null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = String(X_RH_IDENTITY);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FiltersApi - functional programming interface
 * @export
 */
export const FiltersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Show the filter of the endpoint
         * @param {string} X_RH_IDENTITY
         * @param {number} endpointId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filtersShow(X_RH_IDENTITY: string, endpointId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004> {
            const localVarAxiosArgs = FiltersApiAxiosParamCreator(configuration).filtersShow(X_RH_IDENTITY, endpointId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FiltersApi - factory interface
 * @export
 */
export const FiltersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Show the filter of the endpoint
         * @param {string} X_RH_IDENTITY
         * @param {number} endpointId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filtersShow(X_RH_IDENTITY: string, endpointId: number, options?: any) {
            return FiltersApiFp(configuration).filtersShow(X_RH_IDENTITY, endpointId, options)(axios, basePath);
        },
    };
};

/**
 * FiltersApi - object-oriented interface
 * @export
 * @class FiltersApi
 * @extends {BaseAPI}
 */
export class FiltersApi extends BaseAPI {
    /**
     * Show the filter of the endpoint
     * @param {string} X_RH_IDENTITY
     * @param {number} endpointId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FiltersApi
     */
    public filtersShow(X_RH_IDENTITY: string, endpointId: number, options?: any) {
        return FiltersApiFp(this.configuration).filtersShow(X_RH_IDENTITY, endpointId, options)(this.axios, this.basePath);
    }

}

